//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxDocManager *manager, wxFrame *parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDocParentFrame(manager, parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("MaiinIcon"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_menuFile = new wxMenu();
    m_menuBar->Append(m_menuFile, wxT("&Файл"));
    
    m_menuItemFileNew = new wxMenuItem(m_menuFile, wxID_NEW, wxT("Созд&ать\tCtrl-N"), wxT(""), wxITEM_NORMAL);
    m_menuItemFileNew->SetBitmap(wxArtProvider::GetBitmap(wxART_NEW, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileNew);
    
    m_menuItemFileOpen = new wxMenuItem(m_menuFile, wxID_OPEN, wxT("&Открыть...\tCtrl-O"), wxT(""), wxITEM_NORMAL);
    m_menuItemFileOpen->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileOpen);
    
    m_menuItemFileClose = new wxMenuItem(m_menuFile, wxID_CLOSE, wxT("&Закрыть"), wxT(""), wxITEM_NORMAL);
    m_menuItemFileClose->SetBitmap(wxArtProvider::GetBitmap(wxART_CLOSE, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileClose);
    
    m_menuItemFileSave = new wxMenuItem(m_menuFile, wxID_SAVE, wxT("Со&хранить\tCtrl-S"), wxT(""), wxITEM_NORMAL);
    m_menuItemFileSave->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_SAVE, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileSave);
    
    m_menuItemSaveAs = new wxMenuItem(m_menuFile, wxID_SAVEAS, wxT("Сохранить &как..."), wxT(""), wxITEM_NORMAL);
    m_menuItemSaveAs->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_SAVE_AS, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemSaveAs);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemFilePipeDesc = new wxMenuItem(m_menuFile, wxID_PIPE_DESC, wxT("Па&раметры расчета..."), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFilePipeDesc);
    
    m_menuDatabases = new wxMenu();
    m_menuFile->AppendSubMenu(m_menuDatabases, wxT("&Базы данных"));
    
    m_menuItemPipeTable = new wxMenuItem(m_menuDatabases, wxID_PIPE_TABLE, wxT("&Таблица труб..."), wxT(""), wxITEM_NORMAL);
    m_menuDatabases->Append(m_menuItemPipeTable);
    
    m_menuItemArmatTable = new wxMenuItem(m_menuDatabases, wxID_ARMAT_TABLE, wxT("Таблица &арматуры..."), wxT(""), wxITEM_NORMAL);
    m_menuDatabases->Append(m_menuItemArmatTable);
    
    m_menuItemTroinicsTable = new wxMenuItem(m_menuDatabases, wxID_TROINICS_TABLE, wxT("Таблица &тройников..."), wxT(""), wxITEM_NORMAL);
    m_menuDatabases->Append(m_menuItemTroinicsTable);
    
    m_menuImport = new wxMenu();
    m_menuFile->AppendSubMenu(m_menuImport, wxT("&Импорт"));
    
    m_menuItemImportDbf = new wxMenuItem(m_menuImport, wxID_ImportDbf, wxT("Import Dbf...\tCtrl-I"), wxT(""), wxITEM_NORMAL);
    m_menuImport->Append(m_menuItemImportDbf);
    
    m_menuItemImportScheme = new wxMenuItem(m_menuImport, wxID_ADD_SCHEM, wxT("&Вставка схемы"), wxT(""), wxITEM_NORMAL);
    m_menuImport->Append(m_menuItemImportScheme);
    
    m_menuExport = new wxMenu();
    m_menuFile->AppendSubMenu(m_menuExport, wxT("&Экспорт"));
    
    m_menuItemExportIni = new wxMenuItem(m_menuExport, wxID_EXPORT_INI, wxT("Старт *.ini"), wxT(""), wxITEM_NORMAL);
    m_menuExport->Append(m_menuItemExportIni);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemFilePrint = new wxMenuItem(m_menuFile, wxID_PRINT, wxT("&Печать...\tCtrl-p"), wxT(""), wxITEM_NORMAL);
    m_menuItemFilePrint->SetBitmap(wxArtProvider::GetBitmap(wxART_PRINT, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFilePrint);
    
    m_menuItemPrintPreview = new wxMenuItem(m_menuFile, wxID_PREVIEW, wxT("Пред&варительный просмотр"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemPrintPreview);
    
    m_menuItemFilePrintSetup = new wxMenuItem(m_menuFile, wxID_PRINT_SETUP, wxT("Нас&тройка печати..."), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFilePrintSetup);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemFileExit = new wxMenuItem(m_menuFile, wxID_EXIT, wxT("Выход\tAlt-X"), wxT("Выйти из приложения"), wxITEM_NORMAL);
    m_menuItemFileExit->SetBitmap(wxArtProvider::GetBitmap(wxART_QUIT, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileExit);
    
    m_menuEdit = new wxMenu();
    m_menuBar->Append(m_menuEdit, wxT("&Правка"));
    
    m_menuItemUndo = new wxMenuItem(m_menuEdit, wxID_UNDO1, wxT("&Отменить\tCtrl-Z"), wxT(""), wxITEM_NORMAL);
    m_menuItemUndo->SetBitmap(wxArtProvider::GetBitmap(wxART_UNDO, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemUndo);
    
    m_menuItemRedo = new wxMenuItem(m_menuEdit, wxID_REDO1, wxT("Верн&уть\tCtrl-Y"), wxT(""), wxITEM_NORMAL);
    m_menuItemRedo->SetBitmap(wxArtProvider::GetBitmap(wxART_REDO, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemRedo);
    
    m_menuEdit->AppendSeparator();
    
    m_menuItemCut = new wxMenuItem(m_menuEdit, wxID_CUT, wxT("&Вырезать\tCtrl-X"), wxT(""), wxITEM_NORMAL);
    m_menuItemCut->SetBitmap(wxArtProvider::GetBitmap(wxART_CUT, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemCut);
    
    m_menuItemCopy = new wxMenuItem(m_menuEdit, wxID_COPY, wxT("&Копировать\tCtrl-C"), wxT(""), wxITEM_NORMAL);
    m_menuItemCopy->SetBitmap(wxArtProvider::GetBitmap(wxART_COPY, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemCopy);
    
    m_menuItemPaste = new wxMenuItem(m_menuEdit, wxID_PASTE, wxT("Вст&авить\tCtrl-V"), wxT(""), wxITEM_NORMAL);
    m_menuItemPaste->SetBitmap(wxArtProvider::GetBitmap(wxART_PASTE, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemPaste);
    
    m_menuItemDel = new wxMenuItem(m_menuEdit, wxID_DELETE, wxT("У&далить участки...\tDel"), wxT(""), wxITEM_NORMAL);
    m_menuItemDel->SetBitmap(wxArtProvider::GetBitmap(wxART_DELETE, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemDel);
    
    m_menuEdit->AppendSeparator();
    
    m_menuItemSpusk = new wxMenuItem(m_menuEdit, wxID_Spusk, wxT("&Спускники и ответвления..."), wxT(""), wxITEM_NORMAL);
    m_menuEdit->Append(m_menuItemSpusk);
    
    m_menuNode = new wxMenu();
    m_menuEdit->AppendSubMenu(m_menuNode, wxT("&Узел"));
    
    m_menuItemPropMert = new wxMenuItem(m_menuNode, wxID_PROP_MERT, wxT("&Мертвая опора"), wxT(""), wxITEM_NORMAL);
    m_menuNode->Append(m_menuItemPropMert);
    
    m_menuItemPropSk = new wxMenuItem(m_menuNode, wxID_PROP_SK, wxT("&Скользящая опора"), wxT(""), wxITEM_NORMAL);
    m_menuNode->Append(m_menuItemPropSk);
    
    m_menuItemPropNapr = new wxMenuItem(m_menuNode, wxID_PROP_NAPR, wxT("&Направляющая опора"), wxT(""), wxITEM_NORMAL);
    m_menuNode->Append(m_menuItemPropNapr);
    
    m_menuNode->AppendSeparator();
    
    m_menuItemOtvIz = new wxMenuItem(m_menuNode, wxID_PROP_OTV_IZ, wxT("Отвод &изогнутый"), wxT(""), wxITEM_NORMAL);
    m_menuNode->Append(m_menuItemOtvIz);
    
    m_menuItemOtvSv = new wxMenuItem(m_menuNode, wxID_PROP_OTV_SV, wxT("Отвод &сварной"), wxT(""), wxITEM_NORMAL);
    m_menuNode->Append(m_menuItemOtvSv);
    
    m_menuItemArmat = new wxMenuItem(m_menuNode, wxID_PROP_ARMAT, wxT("&Арматура"), wxT(""), wxITEM_NORMAL);
    m_menuNode->Append(m_menuItemArmat);
    
    m_menuScheme = new wxMenu();
    m_menuEdit->AppendSubMenu(m_menuScheme, wxT("С&хема"));
    
    m_menuItemNewPipe = new wxMenuItem(m_menuScheme, wxID_NEW_PIPE, wxT("&Новый участок..."), wxT("Создать новый участок"), wxITEM_NORMAL);
    m_menuItemNewPipe->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolNewPipe")));
    m_menuScheme->Append(m_menuItemNewPipe);
    
    m_menuItemDelPipe = new wxMenuItem(m_menuScheme, wxID_DEL_PIPE, wxT("У&далить участки..."), wxT("Удалить участки"), wxITEM_NORMAL);
    m_menuItemDelPipe->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolDelPipe")));
    m_menuScheme->Append(m_menuItemDelPipe);
    
    m_menuItemMultPipe = new wxMenuItem(m_menuScheme, wxID_MULT_PIPE, wxT("&Pазмножить участок..."), wxT("Размножить участок"), wxITEM_NORMAL);
    m_menuItemMultPipe->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolMultPipe")));
    m_menuScheme->Append(m_menuItemMultPipe);
    
    m_menuItemNewNode = new wxMenuItem(m_menuScheme, wxID_NEW_NODE, wxT("Раз&бить участок..."), wxT("Ввести новые узлы на участке"), wxITEM_NORMAL);
    m_menuItemNewNode->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolNewNode")));
    m_menuScheme->Append(m_menuItemNewNode);
    
    m_menuItemCopyPipeParams = new wxMenuItem(m_menuScheme, wxID_COPY_PIPE_PARAMS, wxT("Коп&ировать параметры участка..."), wxT("Копирование параметров участка"), wxITEM_NORMAL);
    m_menuItemCopyPipeParams->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolCopyPipeParams")));
    m_menuScheme->Append(m_menuItemCopyPipeParams);
    
    m_menuScheme->AppendSeparator();
    
    m_menuItemDelNode = new wxMenuItem(m_menuScheme, wxID_DEL_NODE, wxT("Уда&лить узел..."), wxT("Удалить узел на прямом участке"), wxITEM_NORMAL);
    m_menuItemDelNode->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolDelNode")));
    m_menuScheme->Append(m_menuItemDelNode);
    
    m_menuItemMoveNode = new wxMenuItem(m_menuScheme, wxID_MOVE_NODE, wxT("П&eредвинуть узел..."), wxT("Передвинуть узел на прямом участке"), wxITEM_NORMAL);
    m_menuItemMoveNode->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolMoveNode")));
    m_menuScheme->Append(m_menuItemMoveNode);
    
    m_menuItemRenumPipes = new wxMenuItem(m_menuScheme, wxID_RENUM_PIPES, wxT("Перену&меровать узлы"), wxT("Перенумеровать узлы на схеме"), wxITEM_NORMAL);
    m_menuItemRenumPipes->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolRenumPipes")));
    m_menuScheme->Append(m_menuItemRenumPipes);
    
    m_menuRecord = new wxMenu();
    m_menuBar->Append(m_menuRecord, wxT("&Запись"));
    
    m_menuItemRecordFirst = new wxMenuItem(m_menuRecord, wxID_RECORD_FIRST, wxT("&Первая запись"), wxT(""), wxITEM_NORMAL);
    m_menuRecord->Append(m_menuItemRecordFirst);
    
    m_menuItemRecordPrevious = new wxMenuItem(m_menuRecord, wxID_RECORD_PREV, wxT("Пр&едыдущая запись\tCtrl-<"), wxT(""), wxITEM_NORMAL);
    m_menuRecord->Append(m_menuItemRecordPrevious);
    
    m_menuItemRecordNext = new wxMenuItem(m_menuRecord, wxID_RECORD_NEXT, wxT("&Следующая запись\tCtrl->"), wxT(""), wxITEM_NORMAL);
    m_menuRecord->Append(m_menuItemRecordNext);
    
    m_menuItemRecordLast = new wxMenuItem(m_menuRecord, wxID_RECORD_LAST, wxT("Последн&яя запись"), wxT(""), wxITEM_NORMAL);
    m_menuRecord->Append(m_menuItemRecordLast);
    
    m_menuView = new wxMenu();
    m_menuBar->Append(m_menuView, wxT("&Вид"));
    
    m_menuNavigation = new wxMenu();
    m_menuView->AppendSubMenu(m_menuNavigation, wxT("&Навигация"));
    
    m_menuItemViewZoomWin = new wxMenuItem(m_menuNavigation, wxID_ZOOM_WIN, wxT("&Увеличение рамкой"), wxT(""), wxITEM_RADIO);
    m_menuNavigation->Append(m_menuItemViewZoomWin);
    
    m_menuItemViewPan = new wxMenuItem(m_menuNavigation, wxID_PAN, wxT("&Панорамирование"), wxT(""), wxITEM_RADIO);
    m_menuNavigation->Append(m_menuItemViewPan);
    
    m_menuItemViewRotate = new wxMenuItem(m_menuNavigation, wxID_ROTATE, wxT("&Вращение"), wxT(""), wxITEM_RADIO);
    m_menuNavigation->Append(m_menuItemViewRotate);
    
    m_menuItemViewSelect = new wxMenuItem(m_menuNavigation, wxID_SELECT, wxT("В&ыбор"), wxT(""), wxITEM_RADIO);
    m_menuNavigation->Append(m_menuItemViewSelect);
    
    m_menuFilter = new wxMenu();
    m_menuView->AppendSubMenu(m_menuFilter, wxT("&Отображать"));
    
    m_menuItemViewNodeNums = new wxMenuItem(m_menuFilter, wxID_VIEW_NODE_NUMS, wxT("&Номера узлов"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewNodeNums);
    
    m_menuItemViewSizes = new wxMenuItem(m_menuFilter, wxID_VIEW_SIZES, wxT("&Размеры"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewSizes);
    
    m_menuItemViewAprof = new wxMenuItem(m_menuFilter, wxID_VIEW_APROF, wxT("&Углы в профиле"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewAprof);
    
    m_menuItemViewElements = new wxMenuItem(m_menuFilter, wxID_VIEW_ELEMENTS, wxT("&Элементы"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewElements);
    
    m_menuItemViewNodes = new wxMenuItem(m_menuFilter, wxID_VIEW_NODES, wxT("У&злы"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewNodes);
    
    m_menuView->AppendSeparator();
    
    m_menuItem283 = new wxMenuItem(m_menuView, wxID_SHOW_OGL, wxT("О&бъемный вид"), wxT(""), wxITEM_NORMAL);
    m_menuView->Append(m_menuItem283);
    
    m_menuHelp = new wxMenu();
    m_menuBar->Append(m_menuHelp, wxT("&Справка"));
    
    m_menuItemHelpAbout = new wxMenuItem(m_menuHelp, wxID_ABOUT, wxT("About..."), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemHelpAbout);
    
    m_statusBar = new wxStatusBar(this, wxID_ANY, wxSTB_DEFAULT_STYLE|wxSTB_SIZEGRIP);
    m_statusBar->SetFieldsCount(1);
    this->SetStatusBar(m_statusBar);
    
    m_mgr = new wxAuiManager;
    m_mgr->SetManagedWindow( this );
    m_mgr->SetFlags( wxAUI_MGR_LIVE_RESIZE|wxAUI_MGR_RECTANGLE_HINT|wxAUI_MGR_TRANSPARENT_HINT|wxAUI_MGR_TRANSPARENT_DRAG|wxAUI_MGR_ALLOW_ACTIVE_PANE|wxAUI_MGR_ALLOW_FLOATING);
    m_mgr->GetArtProvider()->SetMetric(wxAUI_DOCKART_GRADIENT_TYPE, wxAUI_GRADIENT_NONE);
    
    m_auibarFilter = new wxAuiToolBar(this, wxID_TB_FILTER, wxDefaultPosition, wxSize(-1,-1), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE|wxAUI_TB_HORZ_LAYOUT|wxAUI_TB_GRIPPER);
    m_auibarFilter->SetToolTip(wxT("Фильтры"));
    m_auibarFilter->SetToolBitmapSize(wxSize(16,16));
    
    m_mgr->AddPane(m_auibarFilter, wxAuiPaneInfo().Name(wxT("Filters")).Caption(wxT("Фильтры")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(0).Position(0).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(true).MinimizeButton(false).PinButton(false).ToolbarPane());
    
    m_auibarFilter->AddTool(wxID_VIEW_NODE_NUMS, wxT("Номера узлов"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterNodenum")), wxNullBitmap, wxITEM_CHECK, wxT("Номера узлов"), wxT(""), NULL);
    
    m_auibarFilter->AddTool(wxID_VIEW_SIZES, wxT("Размеры"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterLength")), wxNullBitmap, wxITEM_CHECK, wxT("Размеры"), wxT(""), NULL);
    
    m_auibarFilter->AddTool(wxID_VIEW_APROF, wxT("Углы в профиле"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterAprof")), wxNullBitmap, wxITEM_CHECK, wxT("Углы в профиле"), wxT(""), NULL);
    
    m_auibarFilter->AddTool(wxID_VIEW_ELEMENTS, wxT("Элементы"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterElements")), wxNullBitmap, wxITEM_CHECK, wxT("Элементы"), wxT(""), NULL);
    
    m_auibarFilter->AddTool(wxID_VIEW_NODES, wxT("Узлы"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterNodes")), wxNullBitmap, wxITEM_CHECK, wxT("Узлы"), wxT(""), NULL);
    m_auibarFilter->Realize();
    
    m_auibarView = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE);
    m_auibarView->SetToolTip(wxT("Навигация"));
    m_auibarView->SetToolBitmapSize(wxSize(16,16));
    
    m_mgr->AddPane(m_auibarView, wxAuiPaneInfo().Name(wxT("View")).Caption(wxT("Навигация")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(0).Position(1).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false).ToolbarPane());
    
    m_auibarView->AddTool(wxID_ViewZoomIn, wxT("Zoom In"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewZoomIn")), wxNullBitmap, wxITEM_NORMAL, wxT("Zoom In"), wxT(""), NULL);
    
    m_auibarView->AddTool(wxID_ViewZoomOut, wxT("Zoom Out"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewZoomOut")), wxNullBitmap, wxITEM_NORMAL, wxT("Zoom Out"), wxT(""), NULL);
    
    m_auibarView->AddSeparator();
    
    m_auibarView->AddTool(wxID_ZOOM_ALL, wxT("Zoom All"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewZoomAll")), wxNullBitmap, wxITEM_NORMAL, wxT("Zoom All"), wxT(""), NULL);
    
    m_auibarView->AddSeparator();
    
    m_auibarView->AddTool(wxID_ZOOM_WIN, wxT("Zoom Window"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewZoomWin")), wxNullBitmap, wxITEM_RADIO, wxT("Zoom Window"), wxT(""), NULL);
    
    m_auibarView->AddTool(wxID_PAN, wxT("Pan"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewPan")), wxNullBitmap, wxITEM_RADIO, wxT("Pan"), wxT(""), NULL);
    
    m_auibarView->AddTool(wxID_ROTATE, wxT("Rotate"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewRotate")), wxNullBitmap, wxITEM_RADIO, wxT("Rotate"), wxT(""), NULL);
    
    m_auibarView->AddTool(wxID_SELECT, wxT("Select"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewSelect")), wxNullBitmap, wxITEM_RADIO, wxT("Select"), wxT(""), NULL);
    
    m_auibarView->AddSeparator();
    
    m_auibarView->AddTool(wxID_PROJ, wxT("Predefined Views"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewPredefView")), wxNullBitmap, wxITEM_NORMAL, wxT("Predefined Views"), wxT(""), NULL);
    wxAuiToolBarItem* m_tbiViewTop = m_auibarView->FindToolByIndex(m_auibarView->GetToolCount()-1);
    if (m_tbiViewTop) {
        m_tbiViewTop->SetHasDropDown(true);
        m_menuViewPredef = new wxMenu;
        m_menuItemViewTop = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_TOP, wxT("Свер&ху"), wxT("Показать модель сверху"), wxITEM_NORMAL);
        m_menuItemViewTop->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolViewPredefView")));
        m_menuViewPredef->Append(m_menuItemViewTop);
        m_menuItemViewBottom = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_BOTTOM, wxT("С&низу"), wxT("Показать модель снизу"), wxITEM_NORMAL);
        m_menuItemViewBottom->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewBottom")));
        m_menuViewPredef->Append(m_menuItemViewBottom);
        m_menuItemViewLeft = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_LEFT, wxT("С&лева"), wxT("Показать модель слева"), wxITEM_NORMAL);
        m_menuItemViewLeft->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewLeft")));
        m_menuViewPredef->Append(m_menuItemViewLeft);
        m_menuItemViewRight = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_RIGHT, wxT("Сп&рава"), wxT("Показать модель справа"), wxITEM_NORMAL);
        m_menuItemViewRight->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewRight")));
        m_menuViewPredef->Append(m_menuItemViewRight);
        m_menuItemViewFront = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_FRONT, wxT("С&переди"), wxT("Показать модель спереди"), wxITEM_NORMAL);
        m_menuItemViewFront->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewFront")));
        m_menuViewPredef->Append(m_menuItemViewFront);
        m_menuItemViewBack = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_BACK, wxT("Сза&ди"), wxT("Показать модель сзади"), wxITEM_NORMAL);
        m_menuItemViewBack->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewBack")));
        m_menuViewPredef->Append(m_menuItemViewBack);
        m_menuViewPredef->AppendSeparator();
        m_menuItemViewSwIso = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_SW_ISO, wxT("&ЮЗ изометрия"), wxT("Показать модель в юго-западной изометрии"), wxITEM_NORMAL);
        m_menuItemViewSwIso->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewSWIso")));
        m_menuViewPredef->Append(m_menuItemViewSwIso);
        m_menuItemViewSeIso = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_SE_ISO, wxT("Ю&В изометрия"), wxT("Показать модель в юго-восточной изометрии"), wxITEM_NORMAL);
        m_menuItemViewSeIso->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewSEIso")));
        m_menuViewPredef->Append(m_menuItemViewSeIso);
        m_menuItemViewNeIso = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_NE_ISO, wxT("&CВ изометрия"), wxT("Показать модель в северо-восточной изометрии"), wxITEM_NORMAL);
        m_menuItemViewNeIso->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewNEIso")));
        m_menuViewPredef->Append(m_menuItemViewNeIso);
        m_menuItemViewNwIso = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_NW_ISO, wxT("С&З изометрия"), wxT("Показать модель в северо-западной изометрии"), wxITEM_NORMAL);
        m_menuItemViewNwIso->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewNWIso")));
        m_menuViewPredef->Append(m_menuItemViewNwIso);
        m_menuViewPredef->AppendSeparator();
        m_menuItemViewDimetry = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_DIMETRY, wxT("Д&иметрия"), wxT(""), wxITEM_NORMAL);
        m_menuItemViewDimetry->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewDimetry")));
        m_menuViewPredef->Append(m_menuItemViewDimetry);
        
        m_dropdownMenus.insert(std::make_pair( m_tbiViewTop->GetId(), m_menuViewPredef) );
    }
    
    m_auibarView->AddTool(wxID_SHOW_OGL, wxT("3D"), wxXmlResource::Get()->LoadBitmap(wxT("ToolView3D")), wxNullBitmap, wxITEM_CHECK, wxT("3D"), wxT(""), NULL);
    m_auibarView->Realize();
    
    m_auibarOperations = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE);
    m_auibarOperations->SetToolTip(wxT("Операции"));
    m_auibarOperations->SetToolBitmapSize(wxSize(16,16));
    
    m_mgr->AddPane(m_auibarOperations, wxAuiPaneInfo().Name(wxT("Operations")).Caption(wxT("Операции")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(0).Position(2).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false).ToolbarPane());
    
    m_auibarOperations->AddTool(wxID_NEW_PIPE, wxT("Новый участок"), wxXmlResource::Get()->LoadBitmap(wxT("ToolNewPipe")), wxNullBitmap, wxITEM_NORMAL, wxT("Новый участок"), wxT("Создать новый участок"), NULL);
    
    m_auibarOperations->AddTool(wxID_DEL_PIPE, wxT("Удалить участки"), wxXmlResource::Get()->LoadBitmap(wxT("ToolDelPipe")), wxNullBitmap, wxITEM_NORMAL, wxT("Удалить участки"), wxT("Удалить участки"), NULL);
    
    m_auibarOperations->AddTool(wxID_MULT_PIPE, wxT("Размножить участок"), wxXmlResource::Get()->LoadBitmap(wxT("ToolMultPipe")), wxNullBitmap, wxITEM_NORMAL, wxT("Размножить участок"), wxT("Размножить участок"), NULL);
    
    m_auibarOperations->AddTool(wxID_NEW_NODE, wxT("Разбить участок"), wxXmlResource::Get()->LoadBitmap(wxT("ToolNewNode")), wxNullBitmap, wxITEM_NORMAL, wxT("Разбить участок"), wxT("Ввести новые узлы на участке"), NULL);
    
    m_auibarOperations->AddTool(wxID_COPY_PIPE_PARAMS, wxT("Копирование параметров"), wxXmlResource::Get()->LoadBitmap(wxT("ToolCopyPipeParams")), wxNullBitmap, wxITEM_NORMAL, wxT("Копирование параметров"), wxT("Копирование параметров участка"), NULL);
    
    m_auibarOperations->AddTool(wxID_INVERT_PIPE, wxT("Инвертировать узлы"), wxXmlResource::Get()->LoadBitmap(wxT("ToolInvertPipe")), wxNullBitmap, wxITEM_NORMAL, wxT("Инвертировать узлы"), wxT("Поменять местами начальный и конечный узел участка"), NULL);
    
    m_auibarOperations->AddSeparator();
    
    m_auibarOperations->AddTool(wxID_DEL_NODE, wxT("Удалить узел"), wxXmlResource::Get()->LoadBitmap(wxT("ToolDelNode")), wxNullBitmap, wxITEM_NORMAL, wxT("Удалить узел"), wxT("Удалить узел на прямом участке"), NULL);
    
    m_auibarOperations->AddTool(wxID_MOVE_NODE, wxT("Передвинуть узел"), wxXmlResource::Get()->LoadBitmap(wxT("ToolMoveNode")), wxNullBitmap, wxITEM_NORMAL, wxT("Передвинуть узел"), wxT("Передвинуть узел на прямом участке"), NULL);
    
    m_auibarOperations->AddTool(wxID_RENUM_PIPES, wxT("Перенумеровать"), wxXmlResource::Get()->LoadBitmap(wxT("ToolRenumPipes")), wxNullBitmap, wxITEM_NORMAL, wxT("Перенумеровать"), wxT("Перенумеровать узлы на схеме"), NULL);
    
    m_auibarOperations->AddTool(wxID_Spusk, wxT("Спуск. и отв."), wxXmlResource::Get()->LoadBitmap(wxT("ToolSpusk")), wxNullBitmap, wxITEM_NORMAL, wxT("Спуск. и отв."), wxT("Вставка спускников  и ответвлений"), NULL);
    
    m_auibarOperations->AddSeparator();
    
    m_auibarOperations->AddTool(wxID_UNDO1, wxT("Отменить"), wxXmlResource::Get()->LoadBitmap(wxT("ToolUndo")), wxNullBitmap, wxITEM_NORMAL, wxT("Отменить"), wxT("Отмена последнего действия"), NULL);
    
    m_auibarOperations->AddTool(wxID_REDO1, wxT("Вернуть"), wxXmlResource::Get()->LoadBitmap(wxT("ToolRedo")), wxNullBitmap, wxITEM_NORMAL, wxT("Вернуть"), wxT("Повторное выполнение последнего действия"), NULL);
    m_auibarOperations->Realize();
    
    m_auiBook = new wxAuiNotebook(this, wxID_ANY, wxDefaultPosition, wxSize(250,250), wxAUI_NB_DEFAULT_STYLE|wxBK_DEFAULT);
    m_auiBook->SetName(wxT("m_auiBook"));
    
    m_mgr->AddPane(m_auiBook, wxAuiPaneInfo().Direction(wxAUI_DOCK_CENTER).Layer(0).Row(0).Position(0).CaptionVisible(false).MaximizeButton(false).CloseButton(true).MinimizeButton(false).PinButton(true));
    
    m_simpleBook = new wxSimplebook(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxBK_DEFAULT);
    m_simpleBook->SetName(wxT("m_simpleBook"));
    m_simpleBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    m_mgr->AddPane(m_simpleBook, wxAuiPaneInfo().Caption(wxT("Свойства участка")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(1).Position(0).BestSize(700,100).CaptionVisible(true).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    m_mgr->Update();
    
    m_simpleBookPanel = new wxPanel(m_simpleBook, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_simpleBook->AddPage(m_simpleBookPanel, wxT("Page"), false);
    
    wxBoxSizer* boxSizer218 = new wxBoxSizer(wxVERTICAL);
    m_simpleBookPanel->SetSizer(boxSizer218);
    
    m_propWnd= new CPropertiesWnd(m_simpleBookPanel, wxID_ANY);
    boxSizer218->Add(m_propWnd, 1, wxALL|wxEXPAND, 5);
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_auiBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_auiBook);
    } else {
        wxPersistenceManager::Get().Restore(m_auiBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_simpleBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_simpleBook);
    } else {
        wxPersistenceManager::Get().Restore(m_simpleBook);
    }
    #endif
    
    SetName(wxT("MainFrameBaseClass"));
    SetSize(800,600);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxVERTICAL);
    } else {
        CentreOnScreen(wxVERTICAL);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(m_menuItemFileExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItemHelpAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
    this->Connect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBaseClass::ShowAuiToolMenu), NULL, this);
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(m_menuItemFileExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItemHelpAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
    m_mgr->UnInit();
    delete m_mgr;

    std::map<int, wxMenu*>::iterator menuIter = m_dropdownMenus.begin();
    for( ; menuIter != m_dropdownMenus.end(); ++menuIter ) {
        wxDELETE( menuIter->second );
    }
    m_dropdownMenus.clear();

    this->Disconnect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBaseClass::ShowAuiToolMenu), NULL, this);
}


void MainFrameBaseClass::ShowAuiToolMenu(wxAuiToolBarEvent& event)
{
    event.Skip();
    if (event.IsDropDownClicked()) {
        wxAuiToolBar* toolbar = wxDynamicCast(event.GetEventObject(), wxAuiToolBar);
        if (toolbar) {
            wxAuiToolBarItem* item = toolbar->FindTool(event.GetId());
            if (item) {
                std::map<int, wxMenu*>::iterator iter = m_dropdownMenus.find(item->GetId());
                if (iter != m_dropdownMenus.end()) {
                    event.Skip(false);
                    wxPoint pt = event.GetItemRect().GetBottomLeft();
                    pt.y++;
                    toolbar->PopupMenu(iter->second, pt);
                }
            }
        }
    }
}
ImageList::ImageList()
    : wxImageList(16, 16, false)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropMo"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("PropMo"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropNapr"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("PropNapr"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropSk"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("PropSk"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropOtvIz"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("PropOtvIz"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropOtvSv"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("PropOtvSv"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropArm"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("PropArm"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("Select"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("Select"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("Pan"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("Pan"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("Rotate"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("Rotate"), bmp ) );
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("Zoom"));
        icn.CopyFromBitmap( bmp );
        this->Add( icn );
        m_bitmaps.insert( std::make_pair(wxT("Zoom"), bmp ) );
    }
    
}

ImageList::~ImageList()
{
}

CNewPipeBaseDialog::CNewPipeBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizerV = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV);
    
    wxStaticBoxSizer* staticBoxSizer405 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizerV->Add(staticBoxSizer405, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer405->Add(boxSizer1, 0, wxALL|wxEXPAND, 5);
    
    m_staticTextAfterPipe = new wxStaticText(this, wxID_ANY, wxT("После участка"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer1->Add(m_staticTextAfterPipe, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceArr;
    m_choice = new wxChoice(this, wxID_AFTER_NODE_CHOICE, wxDefaultPosition, wxSize(-1,-1), m_choiceArr, 0);
    
    boxSizer1->Add(m_choice, 1, wxLEFT|wxRIGHT|wxTOP, 5);
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer405->Add(boxSizer2, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextStartNode = new wxStaticText(this, wxID_ANY, wxT("Начальный узел"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer2->Add(m_staticTextStartNode, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlStartNode = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlStartNode->SetHint(wxT(""));
    #endif
    
    boxSizer2->Add(m_textCtrlStartNode, 1, wxLEFT|wxRIGHT|wxTOP, 5);
    
    wxBoxSizer* boxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer405->Add(boxSizer3, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextEndNode = new wxStaticText(this, wxID_ANY, wxT("Конечный узел"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer3->Add(m_staticTextEndNode, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlEndNode = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlEndNode->SetHint(wxT(""));
    #endif
    
    boxSizer3->Add(m_textCtrlEndNode, 1, wxLEFT|wxRIGHT|wxTOP, 5);
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, 10);
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CNewPipeBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CNewPipeBaseDialog::~CNewPipeBaseDialog()
{
}

CDelPipesBaseDialog::CDelPipesBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer);
    
    wxArrayString m_listBoxArr;
    m_listBox = new wxListBox(this, wxIDC_LIST1, wxDefaultPosition, wxSize(-1,300), m_listBoxArr, wxLB_MULTIPLE);
    
    boxSizer->Add(m_listBox, 1, wxALL|wxEXPAND, 5);
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, 10);
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CDelPipesBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CDelPipesBaseDialog::~CDelPipesBaseDialog()
{
}

CMultPipeBaseDialog::CMultPipeBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizerV1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV1);
    
    wxStaticBoxSizer* staticBoxSizer = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizerV1->Add(staticBoxSizer, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer1, 0, wxALL|wxEXPAND, 5);
    
    m_staticTextMultPipe = new wxStaticText(this, wxID_ANY, wxT("Размножить участок"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer1->Add(m_staticTextMultPipe, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceArr;
    m_choice = new wxChoice(this, wxID_MULT_PIPE_CHOICE, wxDefaultPosition, wxSize(-1,-1), m_choiceArr, 0);
    
    boxSizer1->Add(m_choice, 1, wxLEFT|wxRIGHT|wxTOP, 5);
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer2, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextStartNode = new wxStaticText(this, wxID_ANY, wxT("Начальный узел"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer2->Add(m_staticTextStartNode, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlStartNode = new wxTextCtrl(this, wxID_EDIT1, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlStartNode->SetHint(wxT(""));
    #endif
    
    boxSizer2->Add(m_textCtrlStartNode, 1, wxLEFT|wxRIGHT|wxTOP, 5);
    
    wxBoxSizer* boxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer3, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextEndNode = new wxStaticText(this, wxID_ANY, wxT("Конечный узел"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer3->Add(m_staticTextEndNode, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlEndNode = new wxTextCtrl(this, wxID_EDIT2, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlEndNode->SetHint(wxT(""));
    #endif
    
    boxSizer3->Add(m_textCtrlEndNode, 1, wxLEFT|wxRIGHT|wxTOP, 5);
    
    wxBoxSizer* boxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer4, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextNumPipes = new wxStaticText(this, wxID_ANY, wxT("Количество участков"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer4->Add(m_staticTextNumPipes, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlNumPipes = new wxSpinCtrl(this, wxID_EDIT3, wxT("2"), wxDefaultPosition, wxSize(-1,-1), wxSP_ARROW_KEYS);
    m_textCtrlNumPipes->SetRange(1, 100);
    m_textCtrlNumPipes->SetValue(2);
    
    boxSizer4->Add(m_textCtrlNumPipes, 1, wxALL, 5);
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV1->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, 10);
    
    m_buttonOk13 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk13->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk13);
    
    m_buttonCancel14 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel14);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CMultPipeBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CMultPipeBaseDialog::~CMultPipeBaseDialog()
{
}

CNewNodeBaseDialog::CNewNodeBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer);
    
    wxStaticBoxSizer* staticBoxSizer = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizer->Add(staticBoxSizer, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer1, 0, wxALL|wxEXPAND, 5);
    
    m_staticTextPipe = new wxStaticText(this, wxID_ANY, wxT("Участок:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer1->Add(m_staticTextPipe, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceArr;
    m_choice = new wxChoice(this, wxID_NEW_NODE_CHOICE, wxDefaultPosition, wxSize(-1,-1), m_choiceArr, 0);
    
    boxSizer1->Add(m_choice, 1, wxLEFT|wxRIGHT|wxTOP, 5);
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer2, 0, wxALL|wxEXPAND, 5);
    
    m_staticTextFirstNode = new wxStaticText(this, wxID_ANY, wxT("Номер первого узла:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer2->Add(m_staticTextFirstNode, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlFirstNode = new wxTextCtrl(this, wxID_EDIT1, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlFirstNode->SetHint(wxT(""));
    #endif
    
    boxSizer2->Add(m_textCtrlFirstNode, 1, wxLEFT|wxRIGHT|wxTOP|wxALIGN_CENTER_VERTICAL, 5);
    
    wxStaticBoxSizer* staticBoxSizer475 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Тип разбиения")), wxVERTICAL);
    
    staticBoxSizer->Add(staticBoxSizer475, 1, wxALL|wxEXPAND, 5);
    
    m_radioButton1 = new wxRadioButton(this, wxID_RADIO1, wxT("Разбить произвольно"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_radioButton1->SetValue(1);
    
    staticBoxSizer475->Add(m_radioButton1, 0, wxALL, 5);
    
    wxBoxSizer* boxSizer479 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer475->Add(boxSizer479, 1, wxALL|wxEXPAND, 5);
    
    m_staticText481 = new wxStaticText(this, wxID_ANY, wxT("Длины новых участков:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer479->Add(m_staticText481, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlLengths = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_PROCESS_ENTER|wxTE_MULTILINE);
    
    boxSizer479->Add(m_textCtrlLengths, 1, wxALL, 5);
    m_textCtrlLengths->SetMinSize(wxSize(-1,100));
    
    wxBoxSizer* boxSizer486 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer475->Add(boxSizer486, 0, wxALL, 5);
    
    m_radioButton2 = new wxRadioButton(this, wxID_RADIO2, wxT("Разбить на"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_radioButton2->SetValue(0);
    
    boxSizer486->Add(m_radioButton2, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_textCtrlNumPipes = new wxSpinCtrl(this, wxID_ANY, wxT("2"), wxDefaultPosition, wxSize(50,-1), wxSP_ARROW_KEYS);
    m_textCtrlNumPipes->Enable(false);
    m_textCtrlNumPipes->SetRange(1, 100);
    m_textCtrlNumPipes->SetValue(2);
    
    boxSizer486->Add(m_textCtrlNumPipes, 0, wxALL, 5);
    
    m_staticText490 = new wxStaticText(this, wxID_ANY, wxT("равных участков"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer486->Add(m_staticText490, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_checkBoxSkop = new wxCheckBox(this, wxID_ANY, wxT("Скользящие опоры в новых узлах"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxSkop->SetValue(true);
    
    staticBoxSizer->Add(m_checkBoxSkop, 0, wxALL, 5);
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, 10);
    
    m_buttonOk132 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk132->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk132);
    
    m_buttonCancel143 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel143);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CNewNodeBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CNewNodeBaseDialog::~CNewNodeBaseDialog()
{
}

CCopyParamsBaseDialog::CCopyParamsBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer519 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer519);
    
    wxBoxSizer* boxSizer502 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer519->Add(boxSizer502, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer501 = new wxBoxSizer(wxVERTICAL);
    boxSizer501->SetMinSize(-1,400);
    
    boxSizer502->Add(boxSizer501, 2, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer507 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer501->Add(boxSizer507, 0, wxALL, 0);
    
    m_staticText504 = new wxStaticText(this, wxID_ANY, wxT("Копировать параметры участка"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer507->Add(m_staticText504, 0, wxALL, 5);
    
    m_sPipeName = new wxStaticText(this, wxID_ANY, wxT("1-2"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer507->Add(m_sPipeName, 0, wxALL, 5);
    
    wxArrayString m_lbParamsArr;
    m_lbParams = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxSize(-1,400), m_lbParamsArr, wxLB_MULTIPLE);
    
    boxSizer501->Add(m_lbParams, 1, wxALL|wxEXPAND, 5);
    m_lbParams->SetMinSize(wxSize(-1,400));
    boxSizer501->SetMinSize(wxSize(-1,400));
    
    wxBoxSizer* boxSizer511 = new wxBoxSizer(wxVERTICAL);
    boxSizer511->SetMinSize(-1,400);
    
    boxSizer502->Add(boxSizer511, 1, wxALL|wxEXPAND, 5);
    
    m_staticText513 = new wxStaticText(this, wxID_ANY, wxT(" в участки:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer511->Add(m_staticText513, 0, wxALL, 5);
    
    wxArrayString m_lbPipesArr;
    m_lbPipes = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), m_lbPipesArr, wxLB_MULTIPLE);
    
    boxSizer511->Add(m_lbPipes, 1, wxALL, 5);
    boxSizer511->SetMinSize(wxSize(-1,400));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer519->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, 10);
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CCopyParamsBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CCopyParamsBaseDialog::~CCopyParamsBaseDialog()
{
}

CMoveNodeBaseDialog::CMoveNodeBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer526 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer526);
    
    wxBoxSizer* boxSizer534 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer526->Add(boxSizer534, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextNode = new wxStaticText(this, wxID_ANY, wxT("Узел:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer534->Add(m_staticTextNode, 0, wxALL, 5);
    
    m_sNode = new wxStaticText(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer534->Add(m_sNode, 0, wxALL, 5);
    
    wxBoxSizer* boxSizer540 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer526->Add(boxSizer540, 1, wxALL|wxEXPAND, 5);
    
    m_staticTextDist = new wxStaticText(this, wxID_ANY, wxT("Расстояние"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer540->Add(m_staticTextDist, 0, wxALL, 5);
    
    m_textCtrlDist = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDist->SetHint(wxT(""));
    #endif
    
    boxSizer540->Add(m_textCtrlDist, 0, wxALL, 5);
    
    m_staticText546 = new wxStaticText(this, wxID_ANY, wxT("м"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer540->Add(m_staticText546, 0, wxALL, 5);
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer526->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, 10);
    
    m_buttonOk5 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk5->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk5);
    
    m_buttonCancel6 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel6);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CMoveNodeBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CMoveNodeBaseDialog::~CMoveNodeBaseDialog()
{
}

CSpuskBaseDialog::CSpuskBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer550 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer550);
    
    wxBoxSizer* boxSizer552 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer550->Add(boxSizer552, 1, wxALL|wxEXPAND, 5);
    
    wxArrayString m_listBoxDiamArr;
    m_listBoxDiam = new wxListBox(this, wxIDC_LIST_DIAM, wxDefaultPosition, wxSize(-1,-1), m_listBoxDiamArr, wxLB_SINGLE);
    
    boxSizer552->Add(m_listBoxDiam, 1, wxALL|wxEXPAND, 5);
    
    wxStaticBoxSizer* staticBoxSizer60110 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizer552->Add(staticBoxSizer60110, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer57711 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer60110->Add(boxSizer57711, 1, wxALL|wxEXPAND, 5);
    
    m_staticText58412 = new wxStaticText(this, wxID_ANY, wxT("h, м"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer57711->Add(m_staticText58412, 1, wxALL, 5);
    
    m_textCtrl_h = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_h->SetHint(wxT(""));
    #endif
    
    boxSizer57711->Add(m_textCtrl_h, 0, wxALL, 5);
    
    wxBoxSizer* boxSizer577414 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer60110->Add(boxSizer577414, 1, wxALL|wxEXPAND, 5);
    
    m_staticText584515 = new wxStaticText(this, wxID_ANY, wxT("H1, м"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer577414->Add(m_staticText584515, 1, wxALL, 5);
    
    m_textCtrl_H1 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_H1->SetHint(wxT(""));
    #endif
    
    boxSizer577414->Add(m_textCtrl_H1, 0, wxALL, 5);
    
    wxBoxSizer* boxSizer5774717 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer60110->Add(boxSizer5774717, 1, wxALL|wxEXPAND, 5);
    
    m_staticText5845818 = new wxStaticText(this, wxID_ANY, wxT("H2, м"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer5774717->Add(m_staticText5845818, 1, wxALL, 5);
    
    m_textCtrl_H2 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_H2->SetHint(wxT(""));
    #endif
    
    boxSizer5774717->Add(m_textCtrl_H2, 0, wxALL, 5);
    
    m_checkBoxUhod = new wxCheckBox(this, wxID_ANY, wxT("Уход правый/левый"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxUhod->SetValue(true);
    
    staticBoxSizer60110->Add(m_checkBoxUhod, 0, wxALL, 5);
    
    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));
    
    boxSizer552->Add(m_notebook, 3, wxALL|wxEXPAND, 5);
    
    m_panel567 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel567, wxT("Спускник"), false);
    
    wxBoxSizer* boxSizer571 = new wxBoxSizer(wxHORIZONTAL);
    m_panel567->SetSizer(boxSizer571);
    
    m_staticBitmap575 = new wxStaticBitmap(m_panel567, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Spusk")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    boxSizer571->Add(m_staticBitmap575, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_panel569 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel569, wxT("Врезка под 45 градусов"), false);
    
    wxBoxSizer* boxSizer615 = new wxBoxSizer(wxHORIZONTAL);
    m_panel569->SetSizer(boxSizer615);
    
    m_staticBitmap617 = new wxStaticBitmap(m_panel569, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Vrez45")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    boxSizer615->Add(m_staticBitmap617, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_panel579 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel579, wxT("Гусь"), false);
    
    wxBoxSizer* boxSizer61520 = new wxBoxSizer(wxHORIZONTAL);
    m_panel579->SetSizer(boxSizer61520);
    
    m_staticBitmap61721 = new wxStaticBitmap(m_panel579, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Gus")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    boxSizer61520->Add(m_staticBitmap61721, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_panel581 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel581, wxT("Параллельная врезка"), false);
    
    wxBoxSizer* boxSizer6152022 = new wxBoxSizer(wxHORIZONTAL);
    m_panel581->SetSizer(boxSizer6152022);
    
    m_staticBitmap6172123 = new wxStaticBitmap(m_panel581, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Paralel")), wxDefaultPosition, wxSize(-1,-1), 0 );
    
    boxSizer6152022->Add(m_staticBitmap6172123, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer550->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, 10);
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
    #endif
    
    SetName(wxT("CSpuskBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CSpuskBaseDialog::~CSpuskBaseDialog()
{
}

CPipesTableBaseDlg::CPipesTableBaseDlg(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer);
    
    wxStaticBoxSizer* staticBoxSizer = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("")), wxVERTICAL);
    
    boxSizer->Add(staticBoxSizer, 1, wxALL|wxEXPAND, 5);
    
    m_grid = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxWANTS_CHARS);
    m_grid->CreateGrid(0, 0);
    m_grid->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    m_grid->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
    #if wxVERSION_NUMBER >= 2904
    m_grid->UseNativeColHeader(true);
    #endif
    m_grid->EnableEditing(true);
    
    staticBoxSizer->Add(m_grid, 1, wxALL|wxEXPAND, 5);
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, 10);
    
    m_buttonOk2 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk2->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk2);
    
    m_buttonCancel3 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel3);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CPipesTableBaseDlg"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_RIGHT_UP, wxMouseEventHandler(CPipesTableBaseDlg::OnRightUp), NULL, this);
    
}

CPipesTableBaseDlg::~CPipesTableBaseDlg()
{
    this->Disconnect(wxEVT_RIGHT_UP, wxMouseEventHandler(CPipesTableBaseDlg::OnRightUp), NULL, this);
    
}

CAddSchemDialogBase::CAddSchemDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizerV = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV);
    
    wxStaticBoxSizer* staticBoxSizer = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizerV->Add(staticBoxSizer, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer, 0, wxALL|wxEXPAND, 5);
    
    m_staticTextConnectToPipe = new wxStaticText(this, wxID_ANY, wxT("Состыковать с участком"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer->Add(m_staticTextConnectToPipe, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    wxArrayString m_choiceArr;
    m_choice = new wxChoice(this, wxID_CONNECT_TO_PIPE, wxDefaultPosition, wxSize(-1,-1), m_choiceArr, 0);
    
    boxSizer->Add(m_choice, 1, wxLEFT|wxRIGHT|wxTOP, 5);
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, 10);
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CAddSchemDialogBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CAddSchemDialogBase::~CAddSchemDialogBase()
{
}
