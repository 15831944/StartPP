//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxDocManager *manager, wxFrame *parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDocParentFrame(manager, parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("MainIcon"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    m_menuBar1 = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar1);
    
    m_menuFile = new wxMenu();
    m_menuBar1->Append(m_menuFile, wxT("&Файл"));
    
    m_menuItemFileNew = new wxMenuItem(m_menuFile, wxID_NEW, wxT("Созд&ать\tCtrl+N"), wxT(""), wxITEM_NORMAL);
    m_menuItemFileNew->SetBitmap(wxArtProvider::GetBitmap(wxART_NEW, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileNew);
    
    m_menuItemFileOpen = new wxMenuItem(m_menuFile, wxID_OPEN, wxT("&Открыть...\tCtrl+O"), wxT(""), wxITEM_NORMAL);
    m_menuItemFileOpen->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileOpen);
    
    m_menuItemFileClose = new wxMenuItem(m_menuFile, wxID_CLOSE, wxT("&Закрыть"), wxT(""), wxITEM_NORMAL);
    m_menuItemFileClose->SetBitmap(wxArtProvider::GetBitmap(wxART_CLOSE, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileClose);
    
    m_menuItemFileSave = new wxMenuItem(m_menuFile, wxID_SAVE, wxT("Со&хранить\tCtrl+S"), wxT(""), wxITEM_NORMAL);
    m_menuItemFileSave->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_SAVE, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileSave);
    
    m_menuItemSaveAs = new wxMenuItem(m_menuFile, wxID_SAVEAS, wxT("Сохранить &как..."), wxT(""), wxITEM_NORMAL);
    m_menuItemSaveAs->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_SAVE_AS, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemSaveAs);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemFilePipeDesc = new wxMenuItem(m_menuFile, wxID_PIPE_DESC, wxT("Па&раметры расчета..."), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFilePipeDesc);
    
    m_menuDatabases = new wxMenu();
    m_menuFile->AppendSubMenu(m_menuDatabases, wxT("&Базы данных"));
    
    m_menuItemPipeTable = new wxMenuItem(m_menuDatabases, wxID_PIPE_TABLE, wxT("&Таблица труб..."), wxT(""), wxITEM_NORMAL);
    m_menuDatabases->Append(m_menuItemPipeTable);
    
    m_menuItemTroinicsTable = new wxMenuItem(m_menuDatabases, wxID_TROINICS_TABLE, wxT("Таблица &тройников..."), wxT(""), wxITEM_NORMAL);
    m_menuDatabases->Append(m_menuItemTroinicsTable);
    
    m_menuItemArmatTable = new wxMenuItem(m_menuDatabases, wxID_ARMAT_TABLE, wxT("Таблица &арматуры..."), wxT(""), wxITEM_NORMAL);
    m_menuDatabases->Append(m_menuItemArmatTable);
    
    m_menuImport = new wxMenu();
    m_menuFile->AppendSubMenu(m_menuImport, wxT("&Импорт"));
    
    m_menuItemImportDbf = new wxMenuItem(m_menuImport, wxID_ImportDbf, wxT("Import Dbf...\tCtrl+I"), wxT(""), wxITEM_NORMAL);
    m_menuImport->Append(m_menuItemImportDbf);
    
    m_menuItemImportScheme = new wxMenuItem(m_menuImport, wxID_ADD_SCHEM, wxT("&Вставка схемы"), wxT(""), wxITEM_NORMAL);
    m_menuImport->Append(m_menuItemImportScheme);
    
    m_menuExport = new wxMenu();
    m_menuFile->AppendSubMenu(m_menuExport, wxT("&Экспорт"));
    
    m_menuItemExportIni = new wxMenuItem(m_menuExport, wxID_EXPORT_INI, wxT("Старт *.ini"), wxT(""), wxITEM_NORMAL);
    m_menuExport->Append(m_menuItemExportIni);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemFilePrint = new wxMenuItem(m_menuFile, wxID_PRINT, wxT("&Печать...\tCtrl+P"), wxT(""), wxITEM_NORMAL);
    m_menuItemFilePrint->SetBitmap(wxArtProvider::GetBitmap(wxART_PRINT, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFilePrint);
    
    m_menuItemPrintPreview = new wxMenuItem(m_menuFile, wxID_PREVIEW, wxT("Пред&варительный просмотр\tCtrl+Shift+O"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemPrintPreview);
    
    m_menuItemFilePrintSetup = new wxMenuItem(m_menuFile, wxID_PRINT_SETUP, wxT("Нас&тройка печати..."), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemFilePrintSetup);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemFileExit = new wxMenuItem(m_menuFile, wxID_EXIT, wxT("Выход\tAlt-X"), wxT("Выйти из приложения"), wxITEM_NORMAL);
    m_menuItemFileExit->SetBitmap(wxArtProvider::GetBitmap(wxART_QUIT, wxART_MENU, wxDefaultSize));
    m_menuFile->Append(m_menuItemFileExit);
    
    m_menuEdit = new wxMenu();
    m_menuBar1->Append(m_menuEdit, wxT("&Правка"));
    
    m_menuItemUndo = new wxMenuItem(m_menuEdit, wxID_UNDO1, wxT("&Отменить\tCtrl+Z"), wxT(""), wxITEM_NORMAL);
    m_menuItemUndo->SetBitmap(wxArtProvider::GetBitmap(wxART_UNDO, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemUndo);
    
    m_menuItemRedo = new wxMenuItem(m_menuEdit, wxID_REDO1, wxT("Верн&уть\tCtrl+Y"), wxT(""), wxITEM_NORMAL);
    m_menuItemRedo->SetBitmap(wxArtProvider::GetBitmap(wxART_REDO, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemRedo);
    
    m_menuEdit->AppendSeparator();
    
    m_menuItemCut = new wxMenuItem(m_menuEdit, wxID_CUT, wxT("&Вырезать\tCtrl+X"), wxT(""), wxITEM_NORMAL);
    m_menuItemCut->SetBitmap(wxArtProvider::GetBitmap(wxART_CUT, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemCut);
    
    m_menuItemCopy = new wxMenuItem(m_menuEdit, wxID_COPY, wxT("&Копировать\tCtrl+C"), wxT(""), wxITEM_NORMAL);
    m_menuItemCopy->SetBitmap(wxArtProvider::GetBitmap(wxART_COPY, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemCopy);
    
    m_menuItemPaste = new wxMenuItem(m_menuEdit, wxID_PASTE, wxT("Вст&авить\tCtrl+V"), wxT(""), wxITEM_NORMAL);
    m_menuItemPaste->SetBitmap(wxArtProvider::GetBitmap(wxART_PASTE, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemPaste);
    
    m_menuItemDel = new wxMenuItem(m_menuEdit, wxID_DEL_PIPE, wxT("У&далить участки...\tDel"), wxT(""), wxITEM_NORMAL);
    m_menuItemDel->SetBitmap(wxArtProvider::GetBitmap(wxART_DELETE, wxART_MENU, wxDefaultSize));
    m_menuEdit->Append(m_menuItemDel);
    
    m_menuEdit->AppendSeparator();
    
    m_menuItemSelectAll = new wxMenuItem(m_menuEdit, wxID_SELECTALL, wxT("В&ыбрать все\tCtrl+A"), wxT("Выбрать ве участки"), wxITEM_NORMAL);
    m_menuEdit->Append(m_menuItemSelectAll);
    
    m_menuItemSpusk = new wxMenuItem(m_menuEdit, wxID_Spusk, wxT("&Спускники и ответвления..."), wxT(""), wxITEM_NORMAL);
    m_menuItemSpusk->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolSpusk")));
    m_menuEdit->Append(m_menuItemSpusk);
    
    m_menuNode = new wxMenu();
    m_menuEdit->AppendSubMenu(m_menuNode, wxT("&Узел"));
    
    m_menuItemPropMert = new wxMenuItem(m_menuNode, wxID_PROP_MERT, wxT("&Мертвая опора\tAlt+M"), wxT(""), wxITEM_CHECK);
    m_menuNode->Append(m_menuItemPropMert);
    
    m_menuItemPropSk = new wxMenuItem(m_menuNode, wxID_PROP_SK, wxT("&Скользящая опора\tAlt+S"), wxT(""), wxITEM_CHECK);
    m_menuNode->Append(m_menuItemPropSk);
    
    m_menuItemPropNapr = new wxMenuItem(m_menuNode, wxID_PROP_NAPR, wxT("&Направляющая опора\tAlt+N"), wxT(""), wxITEM_CHECK);
    m_menuNode->Append(m_menuItemPropNapr);
    
    m_menuNode->AppendSeparator();
    
    m_menuItemOtvIz = new wxMenuItem(m_menuNode, wxID_PROP_OTV_IZ, wxT("Отвод &изогнутый\tAlt+O"), wxT(""), wxITEM_CHECK);
    m_menuNode->Append(m_menuItemOtvIz);
    
    m_menuItemOtvSv = new wxMenuItem(m_menuNode, wxID_PROP_OTV_SV, wxT("Отвод &сварной\tAlt+V"), wxT(""), wxITEM_CHECK);
    m_menuNode->Append(m_menuItemOtvSv);
    
    m_menuItemArmat = new wxMenuItem(m_menuNode, wxID_PROP_ARMAT, wxT("&Арматура\tAlt+A"), wxT(""), wxITEM_CHECK);
    m_menuNode->Append(m_menuItemArmat);
    
    m_menuScheme = new wxMenu();
    m_menuEdit->AppendSubMenu(m_menuScheme, wxT("С&хема"));
    
    m_menuItemNewPipe = new wxMenuItem(m_menuScheme, wxID_NEW_PIPE, wxT("&Новый участок...\tCtrl+Shift+N"), wxT("Создать новый участок"), wxITEM_NORMAL);
    m_menuItemNewPipe->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolNewPipe")));
    m_menuScheme->Append(m_menuItemNewPipe);
    
    m_menuItemDelPipe = new wxMenuItem(m_menuScheme, wxID_DEL_PIPE, wxT("У&далить участки...\tCtrl+Shift+D"), wxT("Удалить участки"), wxITEM_NORMAL);
    m_menuItemDelPipe->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolDelPipe")));
    m_menuScheme->Append(m_menuItemDelPipe);
    
    m_menuItemMultPipe = new wxMenuItem(m_menuScheme, wxID_MULT_PIPE, wxT("&Pазмножить участок...\tCtrl+Shift+M"), wxT("Размножить участок"), wxITEM_NORMAL);
    m_menuItemMultPipe->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolMultPipe")));
    m_menuScheme->Append(m_menuItemMultPipe);
    
    m_menuItemNewNode = new wxMenuItem(m_menuScheme, wxID_NEW_NODE, wxT("Раз&бить участок...\tCtrl+Shift+B"), wxT("Ввести новые узлы на участке"), wxITEM_NORMAL);
    m_menuItemNewNode->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolNewNode")));
    m_menuScheme->Append(m_menuItemNewNode);
    
    m_menuItemCopyPipeParams = new wxMenuItem(m_menuScheme, wxID_COPY_PIPE_PARAMS, wxT("Коп&ировать параметры участка...\tCtrl+Shift+C"), wxT("Копирование параметров участка"), wxITEM_NORMAL);
    m_menuItemCopyPipeParams->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolCopyPipeParams")));
    m_menuScheme->Append(m_menuItemCopyPipeParams);
    
    m_menuScheme->AppendSeparator();
    
    m_menuItemDelNode = new wxMenuItem(m_menuScheme, wxID_DEL_NODE, wxT("Уда&лить узел...\tCtrl+Shift+X"), wxT("Удалить узел на прямом участке"), wxITEM_NORMAL);
    m_menuItemDelNode->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolDelNode")));
    m_menuScheme->Append(m_menuItemDelNode);
    
    m_menuItemMoveNode = new wxMenuItem(m_menuScheme, wxID_MOVE_NODE, wxT("П&eредвинуть узел...\tCtrl+Shift+V"), wxT("Передвинуть узел на прямом участке"), wxITEM_NORMAL);
    m_menuItemMoveNode->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolMoveNode")));
    m_menuScheme->Append(m_menuItemMoveNode);
    
    m_menuItemRenumPipes = new wxMenuItem(m_menuScheme, wxID_RENUM_PIPES, wxT("Перену&меровать узлы\tCtrl+Shift+R"), wxT("Перенумеровать узлы на схеме"), wxITEM_NORMAL);
    m_menuItemRenumPipes->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolRenumPipes")));
    m_menuScheme->Append(m_menuItemRenumPipes);
    
    m_menuRecord = new wxMenu();
    m_menuBar1->Append(m_menuRecord, wxT("&Запись"));
    
    m_menuItemRecordFirst = new wxMenuItem(m_menuRecord, wxID_ABORT, wxT("&Первая запись\tCtrl+PgUp"), wxT(""), wxITEM_NORMAL);
    m_menuItemRecordFirst->SetBitmap(wxArtProvider::GetBitmap(wxART_GOTO_FIRST, wxART_MENU, wxDefaultSize));
    m_menuRecord->Append(m_menuItemRecordFirst);
    
    m_menuItemRecordPrevious = new wxMenuItem(m_menuRecord, wxID_ABORT, wxT("Пр&едыдущая запись\tPgUp"), wxT(""), wxITEM_NORMAL);
    m_menuItemRecordPrevious->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_BACK, wxART_MENU, wxDefaultSize));
    m_menuRecord->Append(m_menuItemRecordPrevious);
    
    m_menuItemRecordNext = new wxMenuItem(m_menuRecord, wxID_ABORT, wxT("&Следующая запись\tPgDn"), wxT(""), wxITEM_NORMAL);
    m_menuItemRecordNext->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_FORWARD, wxART_MENU, wxDefaultSize));
    m_menuRecord->Append(m_menuItemRecordNext);
    
    m_menuItemRecordLast = new wxMenuItem(m_menuRecord, wxID_ABORT, wxT("Последн&яя запись\tCtrl+PgDn"), wxT(""), wxITEM_NORMAL);
    m_menuItemRecordLast->SetBitmap(wxArtProvider::GetBitmap(wxART_GOTO_LAST, wxART_MENU, wxDefaultSize));
    m_menuRecord->Append(m_menuItemRecordLast);
    
    m_menuView = new wxMenu();
    m_menuBar1->Append(m_menuView, wxT("&Вид"));
    
    m_menuNavigation = new wxMenu();
    m_menuView->AppendSubMenu(m_menuNavigation, wxT("&Навигация"));
    
    m_menuItemViewZoomWin = new wxMenuItem(m_menuNavigation, wxID_ZOOM_WIN, wxT("&Увеличение рамкой"), wxT(""), wxITEM_CHECK);
    m_menuNavigation->Append(m_menuItemViewZoomWin);
    
    m_menuItemViewPan = new wxMenuItem(m_menuNavigation, wxID_PAN, wxT("&Панорамирование"), wxT(""), wxITEM_CHECK);
    m_menuNavigation->Append(m_menuItemViewPan);
    
    m_menuItemViewRotate = new wxMenuItem(m_menuNavigation, wxID_ROTATE, wxT("&Вращение"), wxT(""), wxITEM_CHECK);
    m_menuNavigation->Append(m_menuItemViewRotate);
    
    m_menuItemViewSelect = new wxMenuItem(m_menuNavigation, wxID_SELECT, wxT("В&ыбор"), wxT(""), wxITEM_CHECK);
    m_menuNavigation->Append(m_menuItemViewSelect);
    
    m_menuFilter = new wxMenu();
    m_menuView->AppendSubMenu(m_menuFilter, wxT("&Отображать"));
    
    m_menuItemViewNodeNums = new wxMenuItem(m_menuFilter, wxID_VIEW_NODE_NUMS, wxT("&Номера узлов"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewNodeNums);
    
    m_menuItemViewSizes = new wxMenuItem(m_menuFilter, wxID_VIEW_SIZES, wxT("&Размеры"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewSizes);
    
    m_menuItemViewAprof = new wxMenuItem(m_menuFilter, wxID_VIEW_APROF, wxT("&Углы в профиле"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewAprof);
    
    m_menuItemViewElements = new wxMenuItem(m_menuFilter, wxID_VIEW_ELEMENTS, wxT("&Элементы"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewElements);
    
    m_menuItemViewNodes = new wxMenuItem(m_menuFilter, wxID_VIEW_NODES, wxT("У&злы"), wxT(""), wxITEM_CHECK);
    m_menuFilter->Append(m_menuItemViewNodes);
    
    m_menuView->AppendSeparator();
    
    m_menuItem3D = new wxMenuItem(m_menuView, wxID_SHOW_OGL, wxT("О&бъемный вид"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_menuItem3D);
    
    m_menuHelp = new wxMenu();
    m_menuBar1->Append(m_menuHelp, wxT("&Справка"));
    
    m_menuItemHelp = new wxMenuItem(m_menuHelp, wxID_HELP_CONTENTS, wxT("Справка StartPP"), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemHelp);
    
    m_menuItemHelpAbout = new wxMenuItem(m_menuHelp, wxID_ABOUT, wxT("О программе StartPP..."), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemHelpAbout);
    
    m_statusBar1 = new wxStatusBar(this, wxID_ANY, wxSTB_DEFAULT_STYLE|wxSTB_SIZEGRIP);
    m_statusBar1->SetFieldsCount(2);
    this->SetStatusBar(m_statusBar1);
    
    m_mgr = new wxAuiManager;
    m_mgr->SetManagedWindow( this );
    m_mgr->SetFlags( wxAUI_MGR_LIVE_RESIZE|wxAUI_MGR_RECTANGLE_HINT|wxAUI_MGR_TRANSPARENT_HINT|wxAUI_MGR_TRANSPARENT_DRAG|wxAUI_MGR_ALLOW_ACTIVE_PANE|wxAUI_MGR_ALLOW_FLOATING);
    m_mgr->GetArtProvider()->SetMetric(wxAUI_DOCKART_GRADIENT_TYPE, wxAUI_GRADIENT_NONE);
    
    m_auibarFilter = new wxAuiToolBar(this, wxID_TB_FILTER, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE|wxAUI_TB_HORZ_LAYOUT|wxAUI_TB_GRIPPER);
    m_auibarFilter->SetToolTip(wxT("Фильтры"));
    m_auibarFilter->SetToolBitmapSize(wxSize(16,16));
    
    m_mgr->AddPane(m_auibarFilter, wxAuiPaneInfo().Name(wxT("Filters")).Caption(wxT("Фильтры")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(0).Position(0).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(true).MinimizeButton(false).PinButton(false).ToolbarPane());
    
    m_auibarFilter->AddTool(wxID_VIEW_NODE_NUMS, wxT("Номера узлов"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterNodenum")), wxNullBitmap, wxITEM_CHECK, wxT("Номера узлов"), wxT(""), NULL);
    
    m_auibarFilter->AddTool(wxID_VIEW_SIZES, wxT("Размеры"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterLength")), wxNullBitmap, wxITEM_CHECK, wxT("Размеры"), wxT(""), NULL);
    
    m_auibarFilter->AddTool(wxID_VIEW_APROF, wxT("Углы в профиле"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterAprof")), wxNullBitmap, wxITEM_CHECK, wxT("Углы в профиле"), wxT(""), NULL);
    
    m_auibarFilter->AddTool(wxID_VIEW_ELEMENTS, wxT("Элементы"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterElements")), wxNullBitmap, wxITEM_CHECK, wxT("Элементы"), wxT(""), NULL);
    
    m_auibarFilter->AddTool(wxID_VIEW_NODES, wxT("Узлы"), wxXmlResource::Get()->LoadBitmap(wxT("ToolFilterNodes")), wxNullBitmap, wxITEM_CHECK, wxT("Узлы"), wxT(""), NULL);
    m_auibarFilter->Realize();
    
    m_auibarView = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE);
    m_auibarView->SetToolTip(wxT("Навигация"));
    m_auibarView->SetToolBitmapSize(wxSize(16,16));
    
    m_mgr->AddPane(m_auibarView, wxAuiPaneInfo().Name(wxT("View")).Caption(wxT("Навигация")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(0).Position(1).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false).ToolbarPane());
    
    m_auibarView->AddTool(wxID_ViewZoomIn, wxT("Увеличить"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewZoomIn")), wxNullBitmap, wxITEM_NORMAL, wxT("Увеличить"), wxT(""), NULL);
    
    m_auibarView->AddTool(wxID_ViewZoomOut, wxT("Уменьшить"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewZoomOut")), wxNullBitmap, wxITEM_NORMAL, wxT("Уменьшить"), wxT(""), NULL);
    
    m_auibarView->AddSeparator();
    
    m_auibarView->AddTool(wxID_ZOOM_ALL, wxT("Показать все"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewZoomAll")), wxNullBitmap, wxITEM_NORMAL, wxT("Показать все"), wxT(""), NULL);
    
    m_auibarView->AddSeparator();
    
    m_auibarView->AddTool(wxID_ZOOM_WIN, wxT("Масштабирование рамкой"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewZoomWin")), wxNullBitmap, wxITEM_CHECK, wxT("Масштабирование рамкой"), wxT(""), NULL);
    
    m_auibarView->AddTool(wxID_PAN, wxT("Панорамирование"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewPan")), wxNullBitmap, wxITEM_CHECK, wxT("Панорамирование"), wxT(""), NULL);
    
    m_auibarView->AddTool(wxID_ROTATE, wxT("Вращение"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewRotate")), wxNullBitmap, wxITEM_CHECK, wxT("Вращение"), wxT(""), NULL);
    
    m_auibarView->AddTool(wxID_SELECT, wxT("Выбор"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewSelect")), wxNullBitmap, wxITEM_CHECK, wxT("Выбор участка"), wxT(""), NULL);
    
    m_auibarView->AddSeparator();
    
    m_auibarView->AddTool(wxID_PROJ, wxT("Виды"), wxXmlResource::Get()->LoadBitmap(wxT("ToolViewPredefView")), wxNullBitmap, wxITEM_NORMAL, wxT("Предопределенные виды"), wxT(""), NULL);
    wxAuiToolBarItem* m_tbiViewTop = m_auibarView->FindToolByIndex(m_auibarView->GetToolCount()-1);
    if (m_tbiViewTop) {
        m_tbiViewTop->SetHasDropDown(true);
        m_menuViewPredef = new wxMenu;
        m_menuItemViewTop = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_TOP, wxT("Свер&ху"), wxT("Показать модель сверху"), wxITEM_NORMAL);
        m_menuItemViewTop->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ToolViewPredefView")));
        m_menuViewPredef->Append(m_menuItemViewTop);
        m_menuItemViewBottom = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_BOTTOM, wxT("С&низу"), wxT("Показать модель снизу"), wxITEM_NORMAL);
        m_menuItemViewBottom->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewBottom")));
        m_menuViewPredef->Append(m_menuItemViewBottom);
        m_menuItemViewLeft = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_LEFT, wxT("С&лева"), wxT("Показать модель слева"), wxITEM_NORMAL);
        m_menuItemViewLeft->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewLeft")));
        m_menuViewPredef->Append(m_menuItemViewLeft);
        m_menuItemViewRight = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_RIGHT, wxT("Сп&рава"), wxT("Показать модель справа"), wxITEM_NORMAL);
        m_menuItemViewRight->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewRight")));
        m_menuViewPredef->Append(m_menuItemViewRight);
        m_menuItemViewFront = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_FRONT, wxT("С&переди"), wxT("Показать модель спереди"), wxITEM_NORMAL);
        m_menuItemViewFront->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewFront")));
        m_menuViewPredef->Append(m_menuItemViewFront);
        m_menuItemViewBack = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_BACK, wxT("Сза&ди"), wxT("Показать модель сзади"), wxITEM_NORMAL);
        m_menuItemViewBack->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewBack")));
        m_menuViewPredef->Append(m_menuItemViewBack);
        m_menuViewPredef->AppendSeparator();
        m_menuItemViewSwIso = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_SW_ISO, wxT("&ЮЗ изометрия"), wxT("Показать модель в юго-западной изометрии"), wxITEM_NORMAL);
        m_menuItemViewSwIso->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewSWIso")));
        m_menuViewPredef->Append(m_menuItemViewSwIso);
        m_menuItemViewSeIso = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_SE_ISO, wxT("Ю&В изометрия"), wxT("Показать модель в юго-восточной изометрии"), wxITEM_NORMAL);
        m_menuItemViewSeIso->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewSEIso")));
        m_menuViewPredef->Append(m_menuItemViewSeIso);
        m_menuItemViewNeIso = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_NE_ISO, wxT("&CВ изометрия"), wxT("Показать модель в северо-восточной изометрии"), wxITEM_NORMAL);
        m_menuItemViewNeIso->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewNEIso")));
        m_menuViewPredef->Append(m_menuItemViewNeIso);
        m_menuItemViewNwIso = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_NW_ISO, wxT("С&З изометрия"), wxT("Показать модель в северо-западной изометрии"), wxITEM_NORMAL);
        m_menuItemViewNwIso->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewNWIso")));
        m_menuViewPredef->Append(m_menuItemViewNwIso);
        m_menuViewPredef->AppendSeparator();
        m_menuItemViewDimetry = new wxMenuItem(m_menuViewPredef, wxID_VIEW_3DVIEWS_DIMETRY, wxT("Д&иметрия"), wxT("Показать модель в диметрии"), wxITEM_NORMAL);
        m_menuItemViewDimetry->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("View3dViewDimetry")));
        m_menuViewPredef->Append(m_menuItemViewDimetry);
        
        m_dropdownMenus.insert(std::make_pair( m_tbiViewTop->GetId(), m_menuViewPredef) );
    }
    
    m_auibarView->AddTool(wxID_SHOW_OGL, wxT("3D вид"), wxXmlResource::Get()->LoadBitmap(wxT("ToolView3D")), wxNullBitmap, wxITEM_CHECK, wxT("Показ модели в 3D виде"), wxT(""), NULL);
    m_auibarView->Realize();
    
    m_auibarOperations = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE);
    m_auibarOperations->SetToolTip(wxT("Операции"));
    m_auibarOperations->SetToolBitmapSize(wxSize(16,16));
    
    m_mgr->AddPane(m_auibarOperations, wxAuiPaneInfo().Name(wxT("Operations")).Caption(wxT("Операции")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(0).Position(2).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false).ToolbarPane());
    
    m_auibarOperations->AddTool(wxID_NEW_PIPE, wxT("Новый участок"), wxXmlResource::Get()->LoadBitmap(wxT("ToolNewPipe")), wxNullBitmap, wxITEM_NORMAL, wxT("Новый участок"), wxT("Создать новый участок"), NULL);
    
    m_auibarOperations->AddTool(wxID_DEL_PIPE, wxT("Удалить участки"), wxXmlResource::Get()->LoadBitmap(wxT("ToolDelPipe")), wxNullBitmap, wxITEM_NORMAL, wxT("Удалить участки"), wxT("Удалить участки"), NULL);
    
    m_auibarOperations->AddTool(wxID_MULT_PIPE, wxT("Размножить участок"), wxXmlResource::Get()->LoadBitmap(wxT("ToolMultPipe")), wxNullBitmap, wxITEM_NORMAL, wxT("Размножить участок"), wxT("Размножить участок"), NULL);
    
    m_auibarOperations->AddTool(wxID_NEW_NODE, wxT("Разбить участок"), wxXmlResource::Get()->LoadBitmap(wxT("ToolNewNode")), wxNullBitmap, wxITEM_NORMAL, wxT("Разбить участок"), wxT("Ввести новые узлы на участке"), NULL);
    
    m_auibarOperations->AddTool(wxID_COPY_PIPE_PARAMS, wxT("Копирование параметров"), wxXmlResource::Get()->LoadBitmap(wxT("ToolCopyPipeParams")), wxNullBitmap, wxITEM_NORMAL, wxT("Копирование параметров"), wxT("Копирование параметров участка"), NULL);
    
    m_auibarOperations->AddTool(wxID_INVERT_PIPE, wxT("Инвертировать узлы"), wxXmlResource::Get()->LoadBitmap(wxT("ToolInvertPipe")), wxNullBitmap, wxITEM_NORMAL, wxT("Инвертировать узлы"), wxT("Поменять местами начальный и конечный узел участка"), NULL);
    
    m_auibarOperations->AddSeparator();
    
    m_auibarOperations->AddTool(wxID_DEL_NODE, wxT("Удалить узел"), wxXmlResource::Get()->LoadBitmap(wxT("ToolDelNode")), wxNullBitmap, wxITEM_NORMAL, wxT("Удалить узел"), wxT("Удалить узел на прямом участке"), NULL);
    
    m_auibarOperations->AddTool(wxID_MOVE_NODE, wxT("Передвинуть узел"), wxXmlResource::Get()->LoadBitmap(wxT("ToolMoveNode")), wxNullBitmap, wxITEM_NORMAL, wxT("Передвинуть узел"), wxT("Передвинуть узел на прямом участке"), NULL);
    
    m_auibarOperations->AddTool(wxID_RENUM_PIPES, wxT("Перенумеровать"), wxXmlResource::Get()->LoadBitmap(wxT("ToolRenumPipes")), wxNullBitmap, wxITEM_NORMAL, wxT("Перенумеровать"), wxT("Перенумеровать узлы на схеме"), NULL);
    
    m_auibarOperations->AddTool(wxID_Spusk, wxT("Спуск. и отв."), wxXmlResource::Get()->LoadBitmap(wxT("ToolSpusk")), wxNullBitmap, wxITEM_NORMAL, wxT("Спуск. и отв."), wxT("Вставка спускников  и ответвлений"), NULL);
    
    m_auibarOperations->AddSeparator();
    
    m_auibarOperations->AddTool(wxID_UNDO1, wxT("Отменить"), wxXmlResource::Get()->LoadBitmap(wxT("ToolUndo")), wxNullBitmap, wxITEM_NORMAL, wxT("Отменить"), wxT("Отмена последнего действия"), NULL);
    
    m_auibarOperations->AddTool(wxID_REDO1, wxT("Вернуть"), wxXmlResource::Get()->LoadBitmap(wxT("ToolRedo")), wxNullBitmap, wxITEM_NORMAL, wxT("Вернуть"), wxT("Повторное выполнение последнего действия"), NULL);
    
    m_auibarOperations->AddSeparator();
    
    m_auibarOperations->AddTool(wxID_DISTANCE, wxT("Расстояние"), wxXmlResource::Get()->LoadBitmap(wxT("Dist")), wxNullBitmap, wxITEM_NORMAL, wxT("Расстояние"), wxT("Расстояние между вершинами"), NULL);
    m_auibarOperations->Realize();
    
    m_auibarStandard = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE);
    m_auibarStandard->SetToolBitmapSize(wxSize(16,16));
    
    m_mgr->AddPane(m_auibarStandard, wxAuiPaneInfo().Name(wxT("Standard")).Caption(wxT("Стандартный")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(0).Position(0).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(true).MinimizeButton(false).PinButton(true).ToolbarPane());
    
    m_auibarStandard->AddTool(wxID_NEW, wxT("Создать"), wxArtProvider::GetBitmap(wxART_NEW, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Создать новый документ"), wxT(""), NULL);
    
    m_auibarStandard->AddTool(wxID_OPEN, wxT("Открыть"), wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Открыть документ"), wxT(""), NULL);
    
    m_auibarStandard->AddTool(wxID_SAVE, wxT("Сохранить"), wxArtProvider::GetBitmap(wxART_FILE_SAVE, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Сохранить документ"), wxT(""), NULL);
    
    m_auibarStandard->AddSeparator();
    
    m_auibarStandard->AddTool(wxID_CUT, wxT("Вырезать"), wxArtProvider::GetBitmap(wxART_CUT, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Вырезать"), wxT(""), NULL);
    
    m_auibarStandard->AddTool(wxID_COPY, wxT("Копировать"), wxArtProvider::GetBitmap(wxART_COPY, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Копировать"), wxT(""), NULL);
    
    m_auibarStandard->AddTool(wxID_PASTE, wxT("Вставить"), wxArtProvider::GetBitmap(wxART_PASTE, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Вставить фрагмент из буфера обмена"), wxT(""), NULL);
    
    m_auibarStandard->AddSeparator();
    
    m_auibarStandard->AddTool(wxID_PRINT, wxT("Печать"), wxArtProvider::GetBitmap(wxART_PRINT, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Печать"), wxT(""), NULL);
    
    m_auibarStandard->AddSeparator();
    
    m_auibarStandard->AddTool(wxID_RECORD_FIRST, wxT("Первый"), wxArtProvider::GetBitmap(wxART_GOTO_FIRST, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Первый участок"), wxT(""), NULL);
    
    m_auibarStandard->AddTool(wxID_RECORD_PREV, wxT("Предыдущий"), wxArtProvider::GetBitmap(wxART_GO_BACK, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Предыдущий участок"), wxT(""), NULL);
    
    m_auibarStandard->AddTool(wxID_RECORD_NEXT, wxT("Следующий"), wxArtProvider::GetBitmap(wxART_GO_FORWARD, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Следующий участок"), wxT(""), NULL);
    
    m_auibarStandard->AddTool(wxID_RECORD_LAST, wxT("Последний"), wxArtProvider::GetBitmap(wxART_GOTO_LAST, wxART_TOOLBAR, wxSize(16, 16)), wxNullBitmap, wxITEM_NORMAL, wxT("Последний участок"), wxT("Последний участок"), NULL);
    m_auibarStandard->Realize();
    
    m_auiBook = new wxAuiNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(250,250)), wxAUI_NB_DEFAULT_STYLE|wxBK_DEFAULT);
    m_auiBook->SetName(wxT("m_auiBook"));
    
    m_mgr->AddPane(m_auiBook, wxAuiPaneInfo().Name(wxT("Book")).Direction(wxAUI_DOCK_CENTER).Layer(0).Row(0).Position(0).CaptionVisible(false).MaximizeButton(false).CloseButton(true).MinimizeButton(false).PinButton(true));
    
    m_simpleBook = new wxSimplebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_simpleBook->SetName(wxT("m_simpleBook"));
    m_simpleBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    m_mgr->AddPane(m_simpleBook, wxAuiPaneInfo().Name(wxT("Properties")).Caption(wxT("Свойства участка")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(1).Position(0).BestSize(350,-1).CaptionVisible(true).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    
    m_simpleBookPanel = new wxPanel(m_simpleBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_simpleBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_simpleBook->AddPage(m_simpleBookPanel, wxT("Page"), false);
    
    m_simpleBook1 = new wxSimplebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_simpleBook1->SetName(wxT("m_simpleBook1"));
    m_simpleBook1->SetEffect(wxSHOW_EFFECT_NONE);
    
    m_mgr->AddPane(m_simpleBook1, wxAuiPaneInfo().Name(wxT("Table")).Caption(wxT("Участки")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(350,100).CaptionVisible(true).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    m_mgr->Update();
    
    m_simpleBookPanel2 = new wxPanel(m_simpleBook1, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_simpleBook1, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_simpleBook1->AddPage(m_simpleBookPanel2, wxT("Page"), false);
    
    wxBoxSizer* boxSizer910 = new wxBoxSizer(wxVERTICAL);
    m_simpleBookPanel2->SetSizer(boxSizer910);
    
    m_grid912 = new PipeGrid(m_simpleBookPanel2, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_simpleBookPanel2, wxSize(-1,-1)), wxWANTS_CHARS);
    m_grid912->SetFocus();
    m_grid912->CreateGrid(0, 0);
    m_grid912->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    m_grid912->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
    #if wxVERSION_NUMBER >= 2904
    m_grid912->UseNativeColHeader(true);
    #endif
    m_grid912->EnableEditing(true);
    
    boxSizer910->Add(m_grid912, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_auiBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_auiBook);
    } else {
        wxPersistenceManager::Get().Restore(m_auiBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_simpleBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_simpleBook);
    } else {
        wxPersistenceManager::Get().Restore(m_simpleBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_simpleBook1)){
        wxPersistenceManager::Get().RegisterAndRestore(m_simpleBook1);
    } else {
        wxPersistenceManager::Get().Restore(m_simpleBook1);
    }
    #endif
    
    SetName(wxT("MainFrameBaseClass"));
    SetSize(1900,1200);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxVERTICAL);
    } else {
        CentreOnScreen(wxVERTICAL);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(m_menuItemFileExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItemHelp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnHelpContents), NULL, this);
    this->Connect(m_menuItemHelpAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
    this->Connect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBaseClass::ShowAuiToolMenu), NULL, this);
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(m_menuItemFileExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItemHelp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnHelpContents), NULL, this);
    this->Disconnect(m_menuItemHelpAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
    m_mgr->UnInit();
    delete m_mgr;

    std::map<int, wxMenu*>::iterator menuIter = m_dropdownMenus.begin();
    for( ; menuIter != m_dropdownMenus.end(); ++menuIter ) {
        wxDELETE( menuIter->second );
    }
    m_dropdownMenus.clear();

    this->Disconnect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBaseClass::ShowAuiToolMenu), NULL, this);
}


void MainFrameBaseClass::ShowAuiToolMenu(wxAuiToolBarEvent& event)
{
    event.Skip();
    if (event.IsDropDownClicked()) {
        wxAuiToolBar* toolbar = wxDynamicCast(event.GetEventObject(), wxAuiToolBar);
        if (toolbar) {
            wxAuiToolBarItem* item = toolbar->FindTool(event.GetId());
            if (item) {
                std::map<int, wxMenu*>::iterator iter = m_dropdownMenus.find(item->GetId());
                if (iter != m_dropdownMenus.end()) {
                    event.Skip(false);
                    wxPoint pt = event.GetItemRect().GetBottomLeft();
                    pt.y++;
                    toolbar->PopupMenu(iter->second, pt);
                }
            }
        }
    }
}
ImageList::ImageList()
    : wxImageList(16, 16, false)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropMo"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("PropMo"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropNapr"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("PropNapr"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropSk"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("PropSk"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropOtvIz"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("PropOtvIz"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropOtvSv"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("PropOtvSv"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("PropArm"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("PropArm"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("Select"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("Select"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("Pan"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("Pan"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("Rotate"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("Rotate"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("Zoom"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("Zoom"), bmp));
        }
    }
    
}

ImageList::~ImageList()
{
}

CNewPipeBaseDialog::CNewPipeBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("ToolNewNode"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxBoxSizer* boxSizerV = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV);
    
    wxStaticBoxSizer* staticBoxSizer = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizerV->Add(staticBoxSizer, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer1, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextAfterPipe = new wxStaticText(this, wxID_ANY, wxT("После участка"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1->Add(m_staticTextAfterPipe, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceArr;
    m_choice = new wxChoice(this, wxID_AFTER_NODE_CHOICE, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceArr, 0);
    
    boxSizer1->Add(m_choice, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer2, 1, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextStartNode = new wxStaticText(this, wxID_ANY, wxT("Начальный узел"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2->Add(m_staticTextStartNode, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlStartNode = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlStartNode->SetHint(wxT(""));
    #endif
    
    boxSizer2->Add(m_textCtrlStartNode, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer3, 1, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextEndNode = new wxStaticText(this, wxID_ANY, wxT("Конечный узел"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer3->Add(m_staticTextEndNode, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlEndNode = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlEndNode->SetHint(wxT(""));
    #endif
    
    boxSizer3->Add(m_textCtrlEndNode, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CNewPipeBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CNewPipeBaseDialog::~CNewPipeBaseDialog()
{
}

CDelPipesBaseDialog::CDelPipesBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("ToolDelPipe"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer);
    
    wxArrayString m_listBoxArr;
    m_listBox = new wxListBox(this, wxIDC_LIST1, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,300)), m_listBoxArr, wxLB_MULTIPLE);
    
    boxSizer->Add(m_listBox, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CDelPipesBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CDelPipesBaseDialog::~CDelPipesBaseDialog()
{
}

CMultPipeBaseDialog::CMultPipeBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("ToolMultPipe"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxBoxSizer* boxSizerV1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV1);
    
    wxStaticBoxSizer* staticBoxSizer = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizerV1->Add(staticBoxSizer, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer1, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextMultPipe = new wxStaticText(this, wxID_ANY, wxT("Размножить участок"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1->Add(m_staticTextMultPipe, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceArr;
    m_choice = new wxChoice(this, wxID_MULT_PIPE_CHOICE, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceArr, 0);
    
    boxSizer1->Add(m_choice, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer2, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextStartNode = new wxStaticText(this, wxID_ANY, wxT("Начальный узел"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2->Add(m_staticTextStartNode, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlStartNode = new wxTextCtrl(this, wxID_EDIT1, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlStartNode->SetHint(wxT(""));
    #endif
    
    boxSizer2->Add(m_textCtrlStartNode, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer3, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextEndNode = new wxStaticText(this, wxID_ANY, wxT("Конечный узел"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer3->Add(m_staticTextEndNode, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlEndNode = new wxTextCtrl(this, wxID_EDIT2, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlEndNode->SetHint(wxT(""));
    #endif
    
    boxSizer3->Add(m_textCtrlEndNode, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer4, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextNumPipes = new wxStaticText(this, wxID_ANY, wxT("Количество участков"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer4->Add(m_staticTextNumPipes, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlNumPipes = new wxSpinCtrl(this, wxID_EDIT3, wxT("2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_textCtrlNumPipes->SetRange(1, 100);
    m_textCtrlNumPipes->SetValue(2);
    
    boxSizer4->Add(m_textCtrlNumPipes, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV1->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk13 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk13->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk13);
    
    m_buttonCancel14 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel14);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CMultPipeBaseDialog"));
    SetMinClientSize(wxSize(300,230));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CMultPipeBaseDialog::~CMultPipeBaseDialog()
{
}

CNewNodeBaseDialog::CNewNodeBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("ToolNewNode"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer);
    
    wxStaticBoxSizer* staticBoxSizer = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizer->Add(staticBoxSizer, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer1, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextPipe = new wxStaticText(this, wxID_ANY, wxT("Участок:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1->Add(m_staticTextPipe, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceArr;
    m_choice = new wxChoice(this, wxID_NEW_NODE_CHOICE, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceArr, 0);
    
    boxSizer1->Add(m_choice, 1, wxLEFT|wxRIGHT|wxTOP, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer2, 0, wxLEFT|wxRIGHT|wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextFirstNode = new wxStaticText(this, wxID_ANY, wxT("Номер первого узла:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2->Add(m_staticTextFirstNode, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlFirstNode = new wxTextCtrl(this, wxID_EDIT1, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlFirstNode->SetHint(wxT(""));
    #endif
    
    boxSizer2->Add(m_textCtrlFirstNode, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer2 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Тип разбиения")), wxVERTICAL);
    
    staticBoxSizer->Add(staticBoxSizer2, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_radioButton1 = new wxRadioButton(this, wxID_RADIO1, wxT("Разбить произвольно"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_radioButton1->SetValue(0);
    
    staticBoxSizer2->Add(m_radioButton1, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer2->Add(boxSizer3, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextLen = new wxStaticText(this, wxID_ANY, wxT("Длины новых участков:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer3->Add(m_staticTextLen, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlLengths = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_PROCESS_ENTER|wxTE_MULTILINE);
    m_textCtrlLengths->Enable(false);
    
    boxSizer3->Add(m_textCtrlLengths, 1, wxEXPAND, WXC_FROM_DIP(5));
    m_textCtrlLengths->SetMinSize(wxSize(-1,100));
    
    wxBoxSizer* boxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer2->Add(boxSizer4, 0, wxALL, WXC_FROM_DIP(5));
    
    m_radioButton2 = new wxRadioButton(this, wxID_RADIO2, wxT("Разбить на"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_radioButton2->SetValue(1);
    
    boxSizer4->Add(m_radioButton2, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlNumPipes = new wxSpinCtrl(this, wxID_ANY, wxT("2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(50,-1)), wxSP_ARROW_KEYS);
    m_textCtrlNumPipes->SetRange(2, 100);
    m_textCtrlNumPipes->SetValue(2);
    
    boxSizer4->Add(m_textCtrlNumPipes, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextEqp = new wxStaticText(this, wxID_ANY, wxT("равных участков"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer4->Add(m_staticTextEqp, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_checkBoxSkop = new wxCheckBox(this, wxID_ANY, wxT("Скользящие опоры в новых узлах"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_checkBoxSkop->SetValue(true);
    
    staticBoxSizer->Add(m_checkBoxSkop, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk132 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk132->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk132);
    
    m_buttonCancel143 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel143);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CNewNodeBaseDialog"));
    SetMinClientSize(wxSize(300,400));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CNewNodeBaseDialog::~CNewNodeBaseDialog()
{
}

CCopyParamsBaseDialog::CCopyParamsBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("ToolCopyPipeParams"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxBoxSizer* boxSizerV = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV);
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizerV->Add(boxSizer1, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxVERTICAL);
    boxSizer2->SetMinSize(-1,400);
    
    boxSizer1->Add(boxSizer2, 2, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer4 = new wxBoxSizer(wxVERTICAL);
    
    boxSizer2->Add(boxSizer4, 1, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer4->Add(boxSizer5, 0, 0, WXC_FROM_DIP(0));
    
    m_staticTextCopy = new wxStaticText(this, wxID_ANY, wxT("Копировать параметры участка"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer5->Add(m_staticTextCopy, 0, wxALL, WXC_FROM_DIP(5));
    
    m_sPipeName = new wxStaticText(this, wxID_ANY, wxT("1-2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer5->Add(m_sPipeName, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_lbParamsArr;
    m_lbParams = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_lbParamsArr, wxLB_MULTIPLE);
    
    boxSizer4->Add(m_lbParams, 1, wxLEFT|wxRIGHT|wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    m_lbParams->SetMinSize(wxSize(-1,400));
    boxSizer2->SetMinSize(wxSize(-1,400));
    
    wxBoxSizer* boxSizer3 = new wxBoxSizer(wxVERTICAL);
    boxSizer3->SetMinSize(-1,400);
    
    boxSizer1->Add(boxSizer3, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextPipes = new wxStaticText(this, wxID_ANY, wxT(" в участки:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer3->Add(m_staticTextPipes, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_lbPipesArr;
    m_lbPipes = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_lbPipesArr, wxLB_MULTIPLE);
    
    boxSizer3->Add(m_lbPipes, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    boxSizer3->SetMinSize(wxSize(-1,400));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CCopyParamsBaseDialog"));
    SetMinClientSize(wxSize(400,200));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CCopyParamsBaseDialog::~CCopyParamsBaseDialog()
{
}

CMoveNodeBaseDialog::CMoveNodeBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("ToolMoveNode"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxBoxSizer* boxSizerV = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV);
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizerV->Add(boxSizer1, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextNode = new wxStaticText(this, wxID_ANY, wxT("Узел:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1->Add(m_staticTextNode, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_sNode = new wxStaticText(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1->Add(m_sNode, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizerV->Add(boxSizer2, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextDist = new wxStaticText(this, wxID_ANY, wxT("Расстояние"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2->Add(m_staticTextDist, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlDist = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDist->SetHint(wxT(""));
    #endif
    
    boxSizer2->Add(m_textCtrlDist, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticTextM = new wxStaticText(this, wxID_ANY, wxT("м"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2->Add(m_staticTextM, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk5 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk5->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk5);
    
    m_buttonCancel6 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel6);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CMoveNodeBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CMoveNodeBaseDialog::~CMoveNodeBaseDialog()
{
}

CSpuskBaseDialog::CSpuskBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("ToolSpusk"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxBoxSizer* boxSizerV = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV);
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizerV->Add(boxSizer1, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_listBoxDiamArr;
    m_listBoxDiam = new wxListBox(this, wxIDC_LIST_DIAM, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_listBoxDiamArr, wxLB_SINGLE);
    
    boxSizer1->Add(m_listBoxDiam, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer1_1 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizer1->Add(staticBoxSizer1_1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1_11 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer1_1->Add(boxSizer1_11, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText_h = new wxStaticText(this, wxID_ANY, wxT("h, м"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1_11->Add(m_staticText_h, 1, wxALL, WXC_FROM_DIP(5));
    
    m_textCtrl_h = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_h->SetHint(wxT(""));
    #endif
    
    boxSizer1_11->Add(m_textCtrl_h, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1_12 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer1_1->Add(boxSizer1_12, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText_H1 = new wxStaticText(this, wxID_ANY, wxT("H1, м"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1_12->Add(m_staticText_H1, 1, wxALL, WXC_FROM_DIP(5));
    
    m_textCtrl_H1 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_H1->SetHint(wxT(""));
    #endif
    
    boxSizer1_12->Add(m_textCtrl_H1, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1_13 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer1_1->Add(boxSizer1_13, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText_H2 = new wxStaticText(this, wxID_ANY, wxT("H2, м"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1_13->Add(m_staticText_H2, 1, wxALL, WXC_FROM_DIP(5));
    
    m_textCtrl_H2 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl_H2->SetHint(wxT(""));
    #endif
    
    boxSizer1_13->Add(m_textCtrl_H2, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkBoxUhod = new wxCheckBox(this, wxID_ANY, wxT("Уход правый/левый"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_checkBoxUhod->SetValue(true);
    
    staticBoxSizer1_1->Add(m_checkBoxUhod, 0, wxALL, WXC_FROM_DIP(5));
    
    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));
    
    boxSizer1->Add(m_notebook, 3, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panel567 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel567, wxT("Спускник"), false);
    
    wxBoxSizer* boxSizer571 = new wxBoxSizer(wxHORIZONTAL);
    m_panel567->SetSizer(boxSizer571);
    
    m_staticBitmap575 = new wxStaticBitmap(m_panel567, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Spusk")), wxDefaultPosition, wxDLG_UNIT(m_panel567, wxSize(-1,-1)), 0 );
    
    boxSizer571->Add(m_staticBitmap575, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_panel569 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel569, wxT("Врезка под 45 градусов"), false);
    
    wxBoxSizer* boxSizer615 = new wxBoxSizer(wxHORIZONTAL);
    m_panel569->SetSizer(boxSizer615);
    
    m_staticBitmap617 = new wxStaticBitmap(m_panel569, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Vrez45")), wxDefaultPosition, wxDLG_UNIT(m_panel569, wxSize(-1,-1)), 0 );
    
    boxSizer615->Add(m_staticBitmap617, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_panel579 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel579, wxT("Гусь"), false);
    
    wxBoxSizer* boxSizer61520 = new wxBoxSizer(wxHORIZONTAL);
    m_panel579->SetSizer(boxSizer61520);
    
    m_staticBitmap61721 = new wxStaticBitmap(m_panel579, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Gus")), wxDefaultPosition, wxDLG_UNIT(m_panel579, wxSize(-1,-1)), 0 );
    
    boxSizer61520->Add(m_staticBitmap61721, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_panel581 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel581, wxT("Параллельная врезка"), false);
    
    wxBoxSizer* boxSizer6152022 = new wxBoxSizer(wxHORIZONTAL);
    m_panel581->SetSizer(boxSizer6152022);
    
    m_staticBitmap6172123 = new wxStaticBitmap(m_panel581, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Paralel")), wxDefaultPosition, wxDLG_UNIT(m_panel581, wxSize(-1,-1)), 0 );
    
    boxSizer6152022->Add(m_staticBitmap6172123, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
    #endif
    
    SetName(wxT("CSpuskBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CSpuskBaseDialog::~CSpuskBaseDialog()
{
}

CPipesTableBaseDlg::CPipesTableBaseDlg(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer);
    
    wxStaticBoxSizer* staticBoxSizer = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("")), wxVERTICAL);
    
    boxSizer->Add(staticBoxSizer, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_grid = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxWANTS_CHARS);
    m_grid->CreateGrid(0, 0);
    m_grid->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    m_grid->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
    #if wxVERSION_NUMBER >= 2904
    m_grid->UseNativeColHeader(true);
    #endif
    m_grid->EnableEditing(true);
    
    staticBoxSizer->Add(m_grid, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer->Add(boxSizer1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer1->Add(boxSizer2, 1, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    m_buttonDelLine = new wxButton(this, wxID_DEL_LINE, wxT("Удалить выбранные строки"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2->Add(m_buttonDelLine, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(10));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer1->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CPipesTableBaseDlg"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonDelLine->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CPipesTableBaseDlg::OnTableDelLine), NULL, this);
    m_buttonDelLine->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CPipesTableBaseDlg::OnUpdateTableDelLine), NULL, this);
    
}

CPipesTableBaseDlg::~CPipesTableBaseDlg()
{
    m_buttonDelLine->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CPipesTableBaseDlg::OnTableDelLine), NULL, this);
    m_buttonDelLine->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(CPipesTableBaseDlg::OnUpdateTableDelLine), NULL, this);
    
}

CAddSchemBaseDialog::CAddSchemBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizerV = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV);
    
    wxStaticBoxSizer* staticBoxSizer = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizerV->Add(staticBoxSizer, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer->Add(boxSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextConnectToPipe = new wxStaticText(this, wxID_ANY, wxT("Состыковать с участком"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer->Add(m_staticTextConnectToPipe, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceArr;
    m_choice = new wxChoice(this, wxID_CONNECT_TO_PIPE, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceArr, 0);
    
    boxSizer->Add(m_choice, 1, wxLEFT|wxRIGHT|wxTOP, WXC_FROM_DIP(5));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CAddSchemBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CAddSchemBaseDialog::~CAddSchemBaseDialog()
{
}

CDistBaseDialog::CDistBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("Dist"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxBoxSizer* boxSizerV = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerV);
    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizerV->Add(boxSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextStart = new wxStaticText(this, wxID_ANY, wxT("От узла:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer->Add(m_staticTextStart, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlStart = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlStart->SetHint(wxT(""));
    #endif
    
    boxSizer->Add(m_textCtrlStart, 0, wxALL, WXC_FROM_DIP(5));
    
    boxSizer->Add(20, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextEnd = new wxStaticText(this, wxID_ANY, wxT("До узла:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer->Add(m_staticTextEnd, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlEnd = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlEnd->SetHint(wxT(""));
    #endif
    
    boxSizer->Add(m_textCtrlEnd, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer2 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Расстояние")), wxVERTICAL);
    
    boxSizerV->Add(staticBoxSizer2, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer2->Add(boxSizer1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticTextAll = new wxStaticText(this, wxID_ANY, wxT("Кратчайшее"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1->Add(m_staticTextAll, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlDistAll = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDistAll->SetHint(wxT(""));
    #endif
    
    boxSizer1->Add(m_textCtrlDistAll, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextM = new wxStaticText(this, wxID_ANY, wxT("м"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1->Add(m_staticTextM, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer2->Add(boxSizer2, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticTextX = new wxStaticText(this, wxID_ANY, wxT("По оси X"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2->Add(m_staticTextX, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlDistX = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDistX->SetHint(wxT(""));
    #endif
    
    boxSizer2->Add(m_textCtrlDistX, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextM1 = new wxStaticText(this, wxID_ANY, wxT("м"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2->Add(m_staticTextM1, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer2->Add(boxSizer3, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticTextY = new wxStaticText(this, wxID_ANY, wxT("По оси Y"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer3->Add(m_staticTextY, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlDistY = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDistY->SetHint(wxT(""));
    #endif
    
    boxSizer3->Add(m_textCtrlDistY, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextM2 = new wxStaticText(this, wxID_ANY, wxT("м"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer3->Add(m_staticTextM2, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer2->Add(boxSizer4, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticTextZ = new wxStaticText(this, wxID_ANY, wxT("По оси Z"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer4->Add(m_staticTextZ, 1, wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlDistZ = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDistZ->SetHint(wxT(""));
    #endif
    
    boxSizer4->Add(m_textCtrlDistZ, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextM3 = new wxStaticText(this, wxID_ANY, wxT("м"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer4->Add(m_staticTextM3, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizerV->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CDistBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CDistBaseDialog::~CDistBaseDialog()
{
}

CPipeDescBaseDialog::CPipeDescBaseDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer);
    
    wxStaticBoxSizer* staticBoxSizer1 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Объект")), wxVERTICAL);
    
    boxSizer->Add(staticBoxSizer1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1_1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer1->Add(boxSizer1_1, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextDate = new wxStaticText(this, wxID_ANY, wxT("Дата"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1_1->Add(m_staticTextDate, 0, wxLEFT|wxRIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_ctlDate = new wxDatePickerCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxDP_DEFAULT);
    
    boxSizer1_1->Add(m_ctlDate, 0, wxLEFT|wxRIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1_2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer1->Add(boxSizer1_2, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextNumber = new wxStaticText(this, wxID_ANY, wxT("Номер объекта"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1_2->Add(m_staticTextNumber, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlDesc = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlDesc->SetHint(wxT(""));
    #endif
    
    boxSizer1_2->Add(m_textCtrlDesc, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer1_3 = new wxBoxSizer(wxVERTICAL);
    
    staticBoxSizer1->Add(boxSizer1_3, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextNormaDoc = new wxStaticText(this, wxID_ANY, wxT("Нормативный документ для оценки прочности:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer1_3->Add(m_staticTextNormaDoc, 0, wxLEFT|wxRIGHT|wxBOTTOM, WXC_FROM_DIP(5));
    
    wxArrayString m_cbNormaDocArr;
    m_cbNormaDocArr.Add(wxT("РД 10-400-01 (режим ПДК) Тепловые сети"));
    m_cbNormaDocArr.Add(wxT("РД 10-400-01 (режим ПДН) Тепловые сети"));
    m_cbNormaDoc = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_cbNormaDocArr, 0);
    
    boxSizer1_3->Add(m_cbNormaDoc, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer2 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Параметры")), wxVERTICAL);
    
    boxSizer->Add(staticBoxSizer2, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer2_1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer2->Add(boxSizer2_1, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextTSet = new wxStaticText(this, wxID_ANY, wxT("Температура монтажа"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2_1->Add(m_staticTextTSet, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlTSet = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlTSet->SetHint(wxT(""));
    #endif
    
    boxSizer2_1->Add(m_textCtrlTSet, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticTextSetGr = new wxStaticText(this, wxID_ANY, wxT("°C"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2_1->Add(m_staticTextSetGr, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer2_2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer2->Add(boxSizer2_2, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextTimeWork = new wxStaticText(this, wxID_ANY, wxT("Расчетный срок службы"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2_2->Add(m_staticTextTimeWork, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlTimeWork = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlTimeWork->SetHint(wxT(""));
    #endif
    
    boxSizer2_2->Add(m_textCtrlTimeWork, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextYr = new wxStaticText(this, wxID_ANY, wxT("год"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer2_2->Add(m_staticTextYr, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer3 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Испытания трубопровода")), wxVERTICAL);
    
    boxSizer->Add(staticBoxSizer3, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer3_1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer3->Add(boxSizer3_1, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextIsp = new wxStaticText(this, wxID_ANY, wxT("Расчет испытаний"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer3_1->Add(m_staticTextIsp, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbIspArr;
    m_cbIspArr.Add(wxT("водой"));
    m_cbIspArr.Add(wxT("воздухом (газом)"));
    m_cbIspArr.Add(wxT("не проводить"));
    m_cbIsp = new wxChoice(this, wxID_COMBO_ISP, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_cbIspArr, 0);
    
    boxSizer3_1->Add(m_cbIsp, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer3_2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer3->Add(boxSizer3_2, 0, wxLEFT|wxRIGHT|wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    m_staticTextTest = new wxStaticText(this, wxID_ANY, wxT("Температура испытаний"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer3_2->Add(m_staticTextTest, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    m_textCtrlTtest = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlTtest->SetHint(wxT(""));
    #endif
    
    boxSizer3_2->Add(m_textCtrlTtest, 1, wxALL|wxALIGN_CENTER_VERTICAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    m_staticTextTtestGr = new wxStaticText(this, wxID_ANY, wxT("°C"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer3_2->Add(m_staticTextTtestGr, 0, wxLEFT|wxRIGHT|wxALIGN_CENTER_VERTICAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer4 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Подбор пружин")), wxVERTICAL);
    
    boxSizer->Add(staticBoxSizer4, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer4_1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer4->Add(boxSizer4_1, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextStrings = new wxStaticText(this, wxID_ANY, wxT("Подбор пружин"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer4_1->Add(m_staticTextStrings, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbStringsArr;
    m_cbStringsArr.Add(wxT("не проводить"));
    m_cbStringsArr.Add(wxT("проводить"));
    m_cbStrings = new wxChoice(this, wxID_COMBO_STRINGS, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_cbStringsArr, 0);
    
    boxSizer4_1->Add(m_cbStrings, 1, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer4_2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer4->Add(boxSizer4_2, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextStrNorm = new wxStaticText(this, wxID_ANY, wxT("Нормаль  подбора пружин"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer4_2->Add(m_staticTextStrNorm, 0, wxALL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    wxArrayString m_cbStrings2Arr;
    m_cbStrings2Arr.Add(wxT("ОСТ 108.764.01-80"));
    m_cbStrings2Arr.Add(wxT("МВН 049-63"));
    m_cbStrings2Arr.Add(wxT("МН 3958-62"));
    m_cbStrings2Arr.Add(wxT("ОСТ 24.125.109-01"));
    m_cbStrings2Arr.Add(wxT("LISEGA"));
    m_cbStrings2 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_cbStrings2Arr, 0);
    
    boxSizer4_2->Add(m_cbStrings2, 0, wxALL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer4_3 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer4->Add(boxSizer4_3, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextStrCond = new wxStaticText(this, wxID_ANY, wxT("Состояние для подбора пружин"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer4_3->Add(m_staticTextStrCond, 0, wxALL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    wxArrayString m_cbStrings3Arr;
    m_cbStrings3Arr.Add(wxT("рабочее"));
    m_cbStrings3Arr.Add(wxT("холодное"));
    m_cbStrings3 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_cbStrings3Arr, 0);
    
    boxSizer4_3->Add(m_cbStrings3, 1, wxALL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer5 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, wxT("Стартовые компенсаторы")), wxVERTICAL);
    
    boxSizer->Add(staticBoxSizer5, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer5_1 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer5->Add(boxSizer5_1, 0, wxLEFT|wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextComp = new wxStaticText(this, wxID_ANY, wxT("Расчет компенсаторов"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer5_1->Add(m_staticTextComp, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbCompArr;
    m_cbCompArr.Add(wxT("не проводить"));
    m_cbCompArr.Add(wxT("проводить"));
    m_cbComp = new wxChoice(this, wxID_COMBO_COMP, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_cbCompArr, 0);
    
    boxSizer5_1->Add(m_cbComp, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer5_2 = new wxBoxSizer(wxHORIZONTAL);
    
    staticBoxSizer5->Add(boxSizer5_2, 0, wxLEFT|wxRIGHT|wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    m_staticTextTz = new wxStaticText(this, wxID_ANY, wxT("Температура замыкания"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer5_2->Add(m_staticTextTz, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    m_textCtrlTz = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlTz->SetHint(wxT(""));
    #endif
    
    boxSizer5_2->Add(m_textCtrlTz, 1, wxALL|wxALIGN_CENTER_VERTICAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    m_staticTextTzGr = new wxStaticText(this, wxID_ANY, wxT("°C"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer5_2->Add(m_staticTextTzGr, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    m_stdBtnSizer = new wxStdDialogButtonSizer();
    
    boxSizer->Add(m_stdBtnSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(10));
    
    m_buttonOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonOk->SetDefault();
    m_stdBtnSizer->AddButton(m_buttonOk);
    
    m_buttonCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer->AddButton(m_buttonCancel);
    m_stdBtnSizer->Realize();
    
    SetName(wxT("CPipeDescBaseDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

CPipeDescBaseDialog::~CPipeDescBaseDialog()
{
}
