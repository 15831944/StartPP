# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 2.8.11)

# Workspace name
project(StartPP)

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Set default locations
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

set(CONFIGURATION_NAME "Debug Osx")

# Projects


# Top project
# Define some variables
set(PROJECT_PATH "${CMAKE_SOURCE_DIR}/")



#{{{{ User Code 1
# Place your code here
#}}}}

include_directories(
    .
    /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/OpenGL.framework/Versions/A/Headers/
    /usr/local/include
    /usr/local/include/freetype2

)


# Compiler options
execute_process(COMMAND 
    wx-config --cflags
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP "${CL_TMP_VAR}" CL_VAR_1)
add_definitions(${CL_VAR_1})
#add_definitions(-std=c++11)
add_definitions(-g)
add_definitions(-O0)
add_definitions(-Wall)
add_definitions(
    -DWX
    -D_MAX_PATH=260
    -D_FILE_OFFSET_BITS=64
    -DWXUSINGDLL
    -D__WXMAC__
    -D__WXOSX__
    -D__WXOSX_COCOA__
)


# Linker options
execute_process(COMMAND 
    wx-config --libs
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP "${CL_TMP_VAR}" CL_VAR_2)
set(LINK_OPTIONS ${CL_VAR_2})
set(LINK_OPTIONS ${LINK_OPTIONS} -stdlib=libc++)


if(WIN32)
    # Resource options
    execute_process(COMMAND 
        /usr/local/lib/wx-config --rcflags
        OUTPUT_VARIABLE
        CL_TMP_VAR
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(STRIP ${CL_TMP_VAR} CL_VAR_3)
    set(RC_OPTIONS ${CL_VAR_3})
endif(WIN32)

# Library path
set(CMAKE_LDFLAGS "${CMAKE_LDFLAGS} -L. ")

# Define the C sources
set ( C_SRCS
    ${CMAKE_SOURCE_DIR}/dbf.c
    ${CMAKE_SOURCE_DIR}/ioapi/ioapi.c
)

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_SOURCE_DIR}/main.cpp
    ${CMAKE_SOURCE_DIR}/wxcrafter.cpp
    ${CMAKE_SOURCE_DIR}/wxcrafter_bitmaps.cpp
    ${CMAKE_SOURCE_DIR}/PropertiesWnd.cpp
    ${CMAKE_SOURCE_DIR}/Recordset.cpp
    ${CMAKE_SOURCE_DIR}/PipesSet.cpp
    ${CMAKE_SOURCE_DIR}/MySet.cpp
    ${CMAKE_SOURCE_DIR}/Material.cpp
    ${CMAKE_SOURCE_DIR}/ArmatSet.cpp
    ${CMAKE_SOURCE_DIR}/StartPPDocWx.cpp
    ${CMAKE_SOURCE_DIR}/TroinicsSet.cpp
    ${CMAKE_SOURCE_DIR}/PipeAndNode.cpp
    ${CMAKE_SOURCE_DIR}/PipeArray.cpp
    ${CMAKE_SOURCE_DIR}/Rotate.cpp
    ${CMAKE_SOURCE_DIR}/StartPPSet.cpp
    ${CMAKE_SOURCE_DIR}/TempHistory.cpp
    ${CMAKE_SOURCE_DIR}/PipeDesc.cpp
    ${CMAKE_SOURCE_DIR}/dbf_wx.cpp
    ${CMAKE_SOURCE_DIR}/wx/src/wxstreamc.cpp
    ${CMAKE_SOURCE_DIR}/Archive.cpp
    ${CMAKE_SOURCE_DIR}/ScreenPipePresenter.cpp
    ${CMAKE_SOURCE_DIR}/PipePresenter.cpp
    ${CMAKE_SOURCE_DIR}/StartPPView.cpp
    ${CMAKE_SOURCE_DIR}/OGLPipePresenter.cpp
    ${CMAKE_SOURCE_DIR}/HSV2RGB.cpp
    ${CMAKE_SOURCE_DIR}/PrintHelper.cpp
    ${CMAKE_SOURCE_DIR}/NewPipeDialog.cpp
    ${CMAKE_SOURCE_DIR}/Pipe.cpp
    ${CMAKE_SOURCE_DIR}/DelPipesDialog.cpp
    ${CMAKE_SOURCE_DIR}/CopyParamsDialog.cpp
    ${CMAKE_SOURCE_DIR}/MoveNodeDialog.cpp
    ${CMAKE_SOURCE_DIR}/VecPnN.cpp
    ${CMAKE_SOURCE_DIR}/SpuskDialog.cpp
    ${CMAKE_SOURCE_DIR}/PipesTableDlg.cpp
    ${CMAKE_SOURCE_DIR}/ArmatTableDlg.cpp
    ${CMAKE_SOURCE_DIR}/TroinicsTableDlg.cpp
    ${CMAKE_SOURCE_DIR}/wxGLCanvasViewWnd.cpp
    ${CMAKE_SOURCE_DIR}/TableDlg.cpp
    ${CMAKE_SOURCE_DIR}/AddSchemDialog.cpp
    ${CMAKE_SOURCE_DIR}/GLFontRenderer.cpp
    ${CMAKE_SOURCE_DIR}/DibGlSurface.cpp
    ${CMAKE_SOURCE_DIR}/DistDialog.cpp
    ${CMAKE_SOURCE_DIR}/MultPipeDialog.cpp
    ${CMAKE_SOURCE_DIR}/NewNodeDialog.cpp
    ${CMAKE_SOURCE_DIR}/MainFrame.cpp
    ${CMAKE_SOURCE_DIR}/PipeDescDialog.cpp
    ${CMAKE_SOURCE_DIR}/CPropValued.cpp
    ${CMAKE_SOURCE_DIR}/PipeGrid.cpp
    ${CMAKE_SOURCE_DIR}/PipeTable.cpp
)

if(WIN32)
    # Define the resource files
    set ( RC_SRCS
        ${CMAKE_SOURCE_DIR}/win_resources.rc
        ${CMAKE_SOURCE_DIR}/StartPP.rc
    )
endif(WIN32)

set_source_files_properties(
    ${CXX_SRCS} PROPERTIES COMPILE_FLAGS 
    " -std=c++11 -g -O0 -std=c++11 ")

set_source_files_properties(
    ${C_SRCS} PROPERTIES COMPILE_FLAGS 
    " -g -O0 -Wall")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(StartPP ${RC_SRCS} ${CXX_SRCS} ${C_SRCS})
target_link_libraries(StartPP ${LINK_OPTIONS})

target_link_libraries(StartPP
    wx_osx_cocoau_core-3.1
    wx_osx_cocoau_aui-3.1
    wx_osx_cocoau_propgrid-3.1
    wx_osx_cocoau_gl-3.1
    ftgl
)



#{{{{ User Code 3
# Place your code here
#}}}}

