# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 2.8.11)

# Project name
project(StartPP)

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Set default locations
set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}//${CMAKE_BUILD_TYPE})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})

#set(CONFIGURATION_NAME "Debug")

# Projects


# Top project
# Define some variables
set(PROJECT_StartPP_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(WORKSPACE_PATH "${CMAKE_CURRENT_LIST_DIR}/")



#{{{{ User Code 1
# Place your code here
#}}}}

include_directories(
    .
    .
    /usr/include
    /usr/include/freetype2
    /usr/include/gtk-3.0
    /usr/lib/x86_64-linux-gnu/glib-2.0/include
    /usr/include/glib-2.0
    /usr/include/pango-1.0
    /usr/include/cairo
    /usr/include/gdk-pixbuf-2.0/
    /usr/include/atk-1.0

)


if (${CMAKE_BUILD_TYPE} STREQUAL Release)
# Compiler options
execute_process(COMMAND
        /usr/local/bin/wx-config --cflags --static --debug=no
        OUTPUT_VARIABLE
        CL_TMP_VAR
        OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_1)
add_definitions(${CL_VAR_1})
add_definitions(-std=c++11)
add_definitions(-O3)
add_definitions(-Wall)
add_definitions(
        -DNDEBUG
        -D_MAX_PATH=260
        -D_FILE_OFFSET_BITS=64
        -DwxDEBUG_LEVEL=0
        -D__WXGTK__
)
else (${CMAKE_BUILD_TYPE} STREQUAL Release)
    execute_process(COMMAND
            /usr/local/bin/wx-config --cxxflags --debug=yes --static=no
            OUTPUT_VARIABLE
            CL_TMP_VAR
            OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(STRIP ${CL_TMP_VAR} CL_VAR_1)
    execute_process(COMMAND
            /usr/local/bin/wx-config --cxxflags --debug=yes --static=no
            OUTPUT_VARIABLE
            CL_TMP_VAR
            OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(STRIP ${CL_TMP_VAR} CL_VAR_2)
    add_definitions(${CL_VAR_1})
    add_definitions(${CL_VAR_2})
    add_definitions(-std=c++11)
    add_definitions(-g)
    add_definitions(-O0)
    add_definitions(-Wall)
    add_definitions(
            -DWX
            -D_MAX_PATH=260
            -D_FILE_OFFSET_BITS=64
            -DWXUSINGDLL
            -D__WXGTK__
    )

endif (${CMAKE_BUILD_TYPE} STREQUAL Release)

# Linker options
execute_process(COMMAND 
    /usr/local/bin/wx-config --libs std,gl,propgrid,aui --static=no --debug=yes
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_3)
set(LINK_OPTIONS ${CL_VAR_3})


if(WIN32)
    # Resource options
    execute_process(COMMAND 
        /usr/local/lib/wx-config --rcflags
        OUTPUT_VARIABLE
        CL_TMP_VAR
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(STRIP ${CL_TMP_VAR} CL_VAR_4)
    set(RC_OPTIONS ${CL_VAR_4})
endif(WIN32)

# Library path
set(CMAKE_LDFLAGS "${CMAKE_LDFLAGS} -L. ")

# Define the C sources
set ( C_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/dbf.c
    ${CMAKE_CURRENT_LIST_DIR}/ioapi/ioapi.c
)

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/main.cpp
    ${CMAKE_CURRENT_LIST_DIR}/wxcrafter.cpp
    ${CMAKE_CURRENT_LIST_DIR}/wxcrafter_bitmaps.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PropertiesWnd.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Recordset.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipesSet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/MySet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Material.cpp
    ${CMAKE_CURRENT_LIST_DIR}/ArmatSet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/TroinicsSet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeAndNode.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeArray.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Rotate.cpp
    ${CMAKE_CURRENT_LIST_DIR}/StartPPSet.cpp
    ${CMAKE_CURRENT_LIST_DIR}/TempHistory.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeDesc.cpp
    ${CMAKE_CURRENT_LIST_DIR}/dbf_wx.cpp
    ${CMAKE_CURRENT_LIST_DIR}/wx/src/wxstreamc.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Archive.cpp
    ${CMAKE_CURRENT_LIST_DIR}/ScreenPipePresenter.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipePresenter.cpp
    ${CMAKE_CURRENT_LIST_DIR}/StartPPView.cpp
    ${CMAKE_CURRENT_LIST_DIR}/OGLPipePresenter.cpp
    ${CMAKE_CURRENT_LIST_DIR}/HSV2RGB.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PrintHelper.cpp
    ${CMAKE_CURRENT_LIST_DIR}/NewPipeDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Pipe.cpp
    ${CMAKE_CURRENT_LIST_DIR}/DelPipesDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/CopyParamsDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/MoveNodeDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/VecPnN.cpp
    ${CMAKE_CURRENT_LIST_DIR}/SpuskDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipesTableDlg.cpp
    ${CMAKE_CURRENT_LIST_DIR}/ArmatTableDlg.cpp
    ${CMAKE_CURRENT_LIST_DIR}/TroinicsTableDlg.cpp
    ${CMAKE_CURRENT_LIST_DIR}/wxGLCanvasViewWnd.cpp
    ${CMAKE_CURRENT_LIST_DIR}/TableDlg.cpp
    ${CMAKE_CURRENT_LIST_DIR}/AddSchemDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/GLFontRenderer.cpp
    ${CMAKE_CURRENT_LIST_DIR}/DibGlSurface.cpp
    ${CMAKE_CURRENT_LIST_DIR}/DistDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/MultPipeDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/NewNodeDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/MainFrame.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeDescDialog.cpp
    ${CMAKE_CURRENT_LIST_DIR}/CPropValued.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeGrid.cpp
    ${CMAKE_CURRENT_LIST_DIR}/PipeTable.cpp
    ${CMAKE_CURRENT_LIST_DIR}/StartPPDoc.cpp
)

if(WIN32)
    # Define the resource files
    set ( RC_SRCS
        ${CMAKE_CURRENT_LIST_DIR}/win_resources.rc
        ${CMAKE_CURRENT_LIST_DIR}/StartPP.rc
    )
endif(WIN32)

if (${CMAKE_BUILD_TYPE} STREQUAL Release)
    set_source_files_properties(
            ${CXX_SRCS} PROPERTIES COMPILE_FLAGS
            " -std=c++11 -O3 -Wall -pthread")

    set_source_files_properties(
            ${C_SRCS} PROPERTIES COMPILE_FLAGS
            " -O3 -Wall")
else(${CMAKE_BUILD_TYPE} STREQUAL Release)
    set_source_files_properties(
            ${CXX_SRCS} PROPERTIES COMPILE_FLAGS
            " -std=c++11 -g -O0 -Wall -std=c++11 -pthread")

    set_source_files_properties(
            ${C_SRCS} PROPERTIES COMPILE_FLAGS
            " -g -O0 -Wall -pthread")
endif(${CMAKE_BUILD_TYPE} STREQUAL Release)

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(StartPP ${RC_SRCS} ${CXX_SRCS} ${C_SRCS})
target_link_libraries(StartPP ${LINK_OPTIONS})

target_link_libraries(StartPP
    GL
    GLU
    ftgl
    X11
    gdk-3
    freetype
)



#{{{{ User Code 3
# Place your code here
#}}}}

