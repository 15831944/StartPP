//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#ifndef _STARTPP_STARTPP_WXCRAFTER_BASE_CLASSES_H
#define _STARTPP_STARTPP_WXCRAFTER_BASE_CLASSES_H

#include <wx/settings.h>
#include <wx/xrc/xmlres.h>
#include <wx/xrc/xh_bmp.h>
#include <wx/frame.h>
#include <wx/iconbndl.h>
#include <wx/artprov.h>
#include <wx/sizer.h>
#include <wx/docview.h>
#include <wx/docmdi.h>
#include <wx/menu.h>
#include <wx/statusbr.h>
#include <wx/aui/framemanager.h>
#include <wx/aui/dockart.h>
#include <wx/pen.h>
#include <wx/aui/auibar.h>
#include <map>
#include <wx/toolbar.h>
#include <wx/aui/auibook.h>
#include <wx/simplebook.h>
#include <wx/panel.h>
#include <wx/imaglist.h>
#include <wx/grid.h>
#include "PipeGrid.h"
#include <wx/bitmap.h>
#include <wx/icon.h>
#include <wx/dialog.h>
#include <wx/statbox.h>
#include <wx/stattext.h>
#include <wx/choice.h>
#include <wx/arrstr.h>
#include <wx/textctrl.h>
#include <wx/button.h>
#include <wx/listbox.h>
#include <wx/spinctrl.h>
#include <wx/radiobut.h>
#include <wx/checkbox.h>
#include <wx/notebook.h>
#include <wx/statbmp.h>
#include <wx/datectrl.h>
#if wxVERSION_NUMBER >= 2900
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/persist/bookctrl.h>
#include <wx/persist/treebook.h>
#endif

#ifdef WXC_FROM_DIP
#undef WXC_FROM_DIP
#endif
#if wxVERSION_NUMBER >= 3100
#define WXC_FROM_DIP(x) wxWindow::FromDIP(x, NULL)
#else
#define WXC_FROM_DIP(x) x
#endif


class MainFrameBaseClass : public wxDocParentFrame
{
public:
    enum {
        wxID_ADD_SCHEM = 10001,
        wxID_ARMAT_TABLE = 10002,
        wxID_COPY_PIPE_PARAMS = 10003,
        wxID_DEL_NODE = 10004,
        wxID_DEL_PIPE = 10005,
        wxID_DISTANCE = 10006,
        wxID_EXPORT_INI = 10007,
        wxID_INVERT_PIPE = 10008,
        wxID_ImportDbf = 10009,
        wxID_MOVE_NODE = 10010,
        wxID_MULT_PIPE = 10011,
        wxID_NEW_NODE = 10012,
        wxID_NEW_PIPE = 10013,
        wxID_PAN = 10014,
        wxID_PIPE_DESC = 10015,
        wxID_PIPE_TABLE = 10016,
        wxID_PROJ = 10017,
        wxID_PROP_ARMAT = 10018,
        wxID_PROP_MERT = 10019,
        wxID_PROP_NAPR = 10020,
        wxID_PROP_OTV_IZ = 10021,
        wxID_PROP_OTV_SV = 10022,
        wxID_PROP_SK = 10023,
        wxID_RECORD_FIRST = 10024,
        wxID_RECORD_LAST = 10025,
        wxID_RECORD_NEXT = 10026,
        wxID_RECORD_PREV = 10027,
        wxID_REDO1 = 10028,
        wxID_RENUM_PIPES = 10029,
        wxID_ROTATE = 10030,
        wxID_SELECT = 10031,
        wxID_SHOW_OGL = 10032,
        wxID_Spusk = 10033,
        wxID_TB_FILTER = 10034,
        wxID_TROINICS_TABLE = 10035,
        wxID_UNDO1 = 10036,
        wxID_VIEW_3DVIEWS_BACK = 10037,
        wxID_VIEW_3DVIEWS_BOTTOM = 10038,
        wxID_VIEW_3DVIEWS_DIMETRY = 10039,
        wxID_VIEW_3DVIEWS_FRONT = 10040,
        wxID_VIEW_3DVIEWS_LEFT = 10041,
        wxID_VIEW_3DVIEWS_NE_ISO = 10042,
        wxID_VIEW_3DVIEWS_NW_ISO = 10043,
        wxID_VIEW_3DVIEWS_RIGHT = 10044,
        wxID_VIEW_3DVIEWS_SE_ISO = 10045,
        wxID_VIEW_3DVIEWS_SW_ISO = 10046,
        wxID_VIEW_3DVIEWS_TOP = 10047,
        wxID_VIEW_APROF = 10048,
        wxID_VIEW_ELEMENTS = 10049,
        wxID_VIEW_NODES = 10050,
        wxID_VIEW_NODE_NUMS = 10051,
        wxID_VIEW_SIZES = 10052,
        wxID_ViewZoomIn = 10053,
        wxID_ViewZoomOut = 10054,
        wxID_ZOOM_ALL = 10055,
        wxID_ZOOM_WIN = 10056,
    };
protected:
    wxMenuBar* m_menuBar1;
    wxMenu* m_menuFile;
    wxMenuItem* m_menuItemFileNew;
    wxMenuItem* m_menuItemFileOpen;
    wxMenuItem* m_menuItemFileClose;
    wxMenuItem* m_menuItemFileSave;
    wxMenuItem* m_menuItemSaveAs;
    wxMenuItem* m_menuItemSep1;
    wxMenuItem* m_menuItemFilePipeDesc;
    wxMenu* m_menuDatabases;
    wxMenuItem* m_menuItemPipeTable;
    wxMenuItem* m_menuItemTroinicsTable;
    wxMenuItem* m_menuItemArmatTable;
    wxMenu* m_menuImport;
    wxMenuItem* m_menuItemImportDbf;
    wxMenuItem* m_menuItemImportScheme;
    wxMenu* m_menuExport;
    wxMenuItem* m_menuItemExportIni;
    wxMenuItem* m_menuSep2;
    wxMenuItem* m_menuItemFilePrint;
    wxMenuItem* m_menuItemPrintPreview;
    wxMenuItem* m_menuItemFilePrintSetup;
    wxMenuItem* m_menuItemSep3;
    wxMenuItem* m_menuItemFileExit;
    wxMenu* m_menuEdit;
    wxMenuItem* m_menuItemUndo;
    wxMenuItem* m_menuItemRedo;
    wxMenuItem* m_menuItem228;
    wxMenuItem* m_menuItemCut;
    wxMenuItem* m_menuItemCopy;
    wxMenuItem* m_menuItemPaste;
    wxMenuItem* m_menuItemDel;
    wxMenuItem* m_menuItem238;
    wxMenuItem* m_menuItemSelectAll;
    wxMenuItem* m_menuItemSpusk;
    wxMenu* m_menuNode;
    wxMenuItem* m_menuItemPropMert;
    wxMenuItem* m_menuItemPropSk;
    wxMenuItem* m_menuItemPropNapr;
    wxMenuItem* m_menuItem250;
    wxMenuItem* m_menuItemOtvIz;
    wxMenuItem* m_menuItemOtvSv;
    wxMenuItem* m_menuItemArmat;
    wxMenu* m_menuScheme;
    wxMenuItem* m_menuItemNewPipe;
    wxMenuItem* m_menuItemDelPipe;
    wxMenuItem* m_menuItemMultPipe;
    wxMenuItem* m_menuItemNewNode;
    wxMenuItem* m_menuItemCopyPipeParams;
    wxMenuItem* m_menuItem303;
    wxMenuItem* m_menuItemDelNode;
    wxMenuItem* m_menuItemMoveNode;
    wxMenuItem* m_menuItemRenumPipes;
    wxMenu* m_menuRecord;
    wxMenuItem* m_menuItemRecordFirst;
    wxMenuItem* m_menuItemRecordPrevious;
    wxMenuItem* m_menuItemRecordNext;
    wxMenuItem* m_menuItemRecordLast;
    wxMenu* m_menuView;
    wxMenu* m_menuNavigation;
    wxMenuItem* m_menuItemViewZoomWin;
    wxMenuItem* m_menuItemViewPan;
    wxMenuItem* m_menuItemViewRotate;
    wxMenuItem* m_menuItemViewSelect;
    wxMenu* m_menuFilter;
    wxMenuItem* m_menuItemViewNodeNums;
    wxMenuItem* m_menuItemViewSizes;
    wxMenuItem* m_menuItemViewAprof;
    wxMenuItem* m_menuItemViewElements;
    wxMenuItem* m_menuItemViewNodes;
    wxMenuItem* m_menuItem285;
    wxMenuItem* m_menuItem3D;
    wxMenu* m_menuHelp;
    wxMenuItem* m_menuItemHelp;
    wxMenuItem* m_menuItemHelpAbout;
    wxStatusBar* m_statusBar1;
    wxAuiManager* m_mgr;
    wxAuiToolBar* m_auibarFilter;
    wxAuiToolBar* m_auibarView;
    std::map<int, wxMenu*> m_dropdownMenus;
    wxMenu* m_menuViewPredef;
    wxMenuItem* m_menuItemViewTop;
    wxMenuItem* m_menuItemViewBottom;
    wxMenuItem* m_menuItemViewLeft;
    wxMenuItem* m_menuItemViewRight;
    wxMenuItem* m_menuItemViewFront;
    wxMenuItem* m_menuItemViewBack;
    wxMenuItem* m_menuItem325;
    wxMenuItem* m_menuItemViewSwIso;
    wxMenuItem* m_menuItemViewSeIso;
    wxMenuItem* m_menuItemViewNeIso;
    wxMenuItem* m_menuItemViewNwIso;
    wxMenuItem* m_menuItem335;
    wxMenuItem* m_menuItemViewDimetry;
    wxAuiToolBar* m_auibarOperations;
    wxAuiToolBar* m_auibarStandard;
    wxAuiNotebook* m_auiBook;
    wxSimplebook* m_simpleBook;
    wxPanel* m_simpleBookPanel;
    wxSimplebook* m_simpleBook1;
    wxPanel* m_simpleBookPanel2;
    PipeGrid* m_grid912;

protected:
    virtual void OnExit(wxCommandEvent& event) { event.Skip(); }
    virtual void OnHelpContents(wxCommandEvent& event) { event.Skip(); }
    virtual void OnAbout(wxCommandEvent& event) { event.Skip(); }

public:
    wxMenuBar* GetMenuBar1() { return m_menuBar1; }
    wxStatusBar* GetStatusBar1() { return m_statusBar1; }
    wxAuiToolBar* GetAuibarFilter() { return m_auibarFilter; }

    virtual void ShowAuiToolMenu(wxAuiToolBarEvent& event);
    wxAuiToolBar* GetAuibarView() { return m_auibarView; }
    wxAuiToolBar* GetAuibarOperations() { return m_auibarOperations; }
    wxAuiToolBar* GetAuibarStandard() { return m_auibarStandard; }
    wxAuiNotebook* GetAuiBook() { return m_auiBook; }
    wxPanel* GetSimpleBookPanel() { return m_simpleBookPanel; }
    wxSimplebook* GetSimpleBook() { return m_simpleBook; }
    PipeGrid* GetGrid912() { return m_grid912; }
    wxPanel* GetSimpleBookPanel2() { return m_simpleBookPanel2; }
    wxSimplebook* GetSimpleBook1() { return m_simpleBook1; }
    wxAuiManager* GetMgr() { return m_mgr; }
    MainFrameBaseClass(wxDocManager *manager, wxFrame *parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Старт Препроцессор"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(1900,1200), long style = wxCAPTION|wxRESIZE_BORDER|wxMAXIMIZE_BOX|wxMINIMIZE_BOX|wxSYSTEM_MENU|wxCLOSE_BOX);
    virtual ~MainFrameBaseClass();
};


class ImageList : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageList();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageList();
};


class CNewPipeBaseDialog : public wxDialog
{
public:
    enum {
        wxID_AFTER_NODE_CHOICE = 10001,
    };
protected:
    wxStaticText* m_staticTextAfterPipe;
    wxChoice* m_choice;
    wxStaticText* m_staticTextStartNode;
    wxTextCtrl* m_textCtrlStartNode;
    wxStaticText* m_staticTextEndNode;
    wxTextCtrl* m_textCtrlEndNode;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk;
    wxButton* m_buttonCancel;

protected:

public:
    wxStaticText* GetStaticTextAfterPipe() { return m_staticTextAfterPipe; }
    wxChoice* GetChoice() { return m_choice; }
    wxStaticText* GetStaticTextStartNode() { return m_staticTextStartNode; }
    wxTextCtrl* GetTextCtrlStartNode() { return m_textCtrlStartNode; }
    wxStaticText* GetStaticTextEndNode() { return m_staticTextEndNode; }
    wxTextCtrl* GetTextCtrlEndNode() { return m_textCtrlEndNode; }
    CNewPipeBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Новый участок"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE);
    virtual ~CNewPipeBaseDialog();
};


class CDelPipesBaseDialog : public wxDialog
{
public:
    enum {
        wxIDC_LIST1 = 10001,
    };
protected:
    wxListBox* m_listBox;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk;
    wxButton* m_buttonCancel;

protected:

public:
    wxListBox* GetListBox() { return m_listBox; }
    CDelPipesBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Удалить участки"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER);
    virtual ~CDelPipesBaseDialog();
};


class CMultPipeBaseDialog : public wxDialog
{
public:
    enum {
        wxID_EDIT1 = 10001,
        wxID_EDIT2 = 10002,
        wxID_EDIT3 = 10003,
        wxID_MULT_PIPE_CHOICE = 10004,
    };
protected:
    wxStaticText* m_staticTextMultPipe;
    wxChoice* m_choice;
    wxStaticText* m_staticTextStartNode;
    wxTextCtrl* m_textCtrlStartNode;
    wxStaticText* m_staticTextEndNode;
    wxTextCtrl* m_textCtrlEndNode;
    wxStaticText* m_staticTextNumPipes;
    wxSpinCtrl* m_textCtrlNumPipes;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk13;
    wxButton* m_buttonCancel14;

protected:

public:
    wxStaticText* GetStaticTextMultPipe() { return m_staticTextMultPipe; }
    wxChoice* GetChoice() { return m_choice; }
    wxStaticText* GetStaticTextStartNode() { return m_staticTextStartNode; }
    wxTextCtrl* GetTextCtrlStartNode() { return m_textCtrlStartNode; }
    wxStaticText* GetStaticTextEndNode() { return m_staticTextEndNode; }
    wxTextCtrl* GetTextCtrlEndNode() { return m_textCtrlEndNode; }
    wxStaticText* GetStaticTextNumPipes() { return m_staticTextNumPipes; }
    wxSpinCtrl* GetTextCtrlNumPipes() { return m_textCtrlNumPipes; }
    CMultPipeBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Размножить участок"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE);
    virtual ~CMultPipeBaseDialog();
};


class CNewNodeBaseDialog : public wxDialog
{
public:
    enum {
        wxID_EDIT1 = 10001,
        wxID_NEW_NODE_CHOICE = 10002,
        wxID_RADIO1 = 10003,
        wxID_RADIO2 = 10004,
    };
protected:
    wxStaticText* m_staticTextPipe;
    wxChoice* m_choice;
    wxStaticText* m_staticTextFirstNode;
    wxTextCtrl* m_textCtrlFirstNode;
    wxRadioButton* m_radioButton1;
    wxStaticText* m_staticTextLen;
    wxTextCtrl* m_textCtrlLengths;
    wxRadioButton* m_radioButton2;
    wxSpinCtrl* m_textCtrlNumPipes;
    wxStaticText* m_staticTextEqp;
    wxCheckBox* m_checkBoxSkop;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk132;
    wxButton* m_buttonCancel143;

protected:

public:
    wxStaticText* GetStaticTextPipe() { return m_staticTextPipe; }
    wxChoice* GetChoice() { return m_choice; }
    wxStaticText* GetStaticTextFirstNode() { return m_staticTextFirstNode; }
    wxTextCtrl* GetTextCtrlFirstNode() { return m_textCtrlFirstNode; }
    wxRadioButton* GetRadioButton1() { return m_radioButton1; }
    wxStaticText* GetStaticTextLen() { return m_staticTextLen; }
    wxTextCtrl* GetTextCtrlLengths() { return m_textCtrlLengths; }
    wxRadioButton* GetRadioButton2() { return m_radioButton2; }
    wxSpinCtrl* GetTextCtrlNumPipes() { return m_textCtrlNumPipes; }
    wxStaticText* GetStaticTextEqp() { return m_staticTextEqp; }
    wxCheckBox* GetCheckBoxSkop() { return m_checkBoxSkop; }
    CNewNodeBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Разбить участок"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER);
    virtual ~CNewNodeBaseDialog();
};


class CCopyParamsBaseDialog : public wxDialog
{
protected:
    wxStaticText* m_staticTextCopy;
    wxStaticText* m_sPipeName;
    wxListBox* m_lbParams;
    wxStaticText* m_staticTextPipes;
    wxListBox* m_lbPipes;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk;
    wxButton* m_buttonCancel;

protected:

public:
    wxStaticText* GetStaticTextCopy() { return m_staticTextCopy; }
    wxStaticText* GetSPipeName() { return m_sPipeName; }
    wxListBox* GetLbParams() { return m_lbParams; }
    wxStaticText* GetStaticTextPipes() { return m_staticTextPipes; }
    wxListBox* GetLbPipes() { return m_lbPipes; }
    CCopyParamsBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Копирование параметров участка"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER);
    virtual ~CCopyParamsBaseDialog();
};


class CMoveNodeBaseDialog : public wxDialog
{
protected:
    wxStaticText* m_staticTextNode;
    wxStaticText* m_sNode;
    wxStaticText* m_staticTextDist;
    wxTextCtrl* m_textCtrlDist;
    wxStaticText* m_staticTextM;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk5;
    wxButton* m_buttonCancel6;

protected:

public:
    wxStaticText* GetStaticTextNode() { return m_staticTextNode; }
    wxStaticText* GetSNode() { return m_sNode; }
    wxStaticText* GetStaticTextDist() { return m_staticTextDist; }
    wxTextCtrl* GetTextCtrlDist() { return m_textCtrlDist; }
    wxStaticText* GetStaticTextM() { return m_staticTextM; }
    CMoveNodeBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Передвинуть узел"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE);
    virtual ~CMoveNodeBaseDialog();
};


class CSpuskBaseDialog : public wxDialog
{
public:
    enum {
        wxIDC_LIST_DIAM = 10001,
    };
protected:
    wxListBox* m_listBoxDiam;
    wxStaticText* m_staticText_h;
    wxTextCtrl* m_textCtrl_h;
    wxStaticText* m_staticText_H1;
    wxTextCtrl* m_textCtrl_H1;
    wxStaticText* m_staticText_H2;
    wxTextCtrl* m_textCtrl_H2;
    wxCheckBox* m_checkBoxUhod;
    wxNotebook* m_notebook;
    wxPanel* m_panel567;
    wxStaticBitmap* m_staticBitmap575;
    wxPanel* m_panel569;
    wxStaticBitmap* m_staticBitmap617;
    wxPanel* m_panel579;
    wxStaticBitmap* m_staticBitmap61721;
    wxPanel* m_panel581;
    wxStaticBitmap* m_staticBitmap6172123;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk;
    wxButton* m_buttonCancel;

protected:

public:
    wxListBox* GetListBoxDiam() { return m_listBoxDiam; }
    wxStaticText* GetStaticText_h() { return m_staticText_h; }
    wxTextCtrl* GetTextCtrl_h() { return m_textCtrl_h; }
    wxStaticText* GetStaticText_H1() { return m_staticText_H1; }
    wxTextCtrl* GetTextCtrl_H1() { return m_textCtrl_H1; }
    wxStaticText* GetStaticText_H2() { return m_staticText_H2; }
    wxTextCtrl* GetTextCtrl_H2() { return m_textCtrl_H2; }
    wxCheckBox* GetCheckBoxUhod() { return m_checkBoxUhod; }
    wxStaticBitmap* GetStaticBitmap575() { return m_staticBitmap575; }
    wxPanel* GetPanel567() { return m_panel567; }
    wxStaticBitmap* GetStaticBitmap617() { return m_staticBitmap617; }
    wxPanel* GetPanel569() { return m_panel569; }
    wxStaticBitmap* GetStaticBitmap61721() { return m_staticBitmap61721; }
    wxPanel* GetPanel579() { return m_panel579; }
    wxStaticBitmap* GetStaticBitmap6172123() { return m_staticBitmap6172123; }
    wxPanel* GetPanel581() { return m_panel581; }
    wxNotebook* GetNotebook() { return m_notebook; }
    CSpuskBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Вставка спускников и ответвлений"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER);
    virtual ~CSpuskBaseDialog();
};


class CPipesTableBaseDlg : public wxDialog
{
public:
    enum {
        wxID_DEL_LINE = 10001,
    };
protected:
    wxGrid* m_grid;
    wxButton* m_buttonDelLine;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk;
    wxButton* m_buttonCancel;

protected:
    virtual void OnTableDelLine(wxCommandEvent& event) { event.Skip(); }
    virtual void OnUpdateTableDelLine(wxUpdateUIEvent& event) { event.Skip(); }

public:
    wxGrid* GetGrid() { return m_grid; }
    wxButton* GetButtonDelLine() { return m_buttonDelLine; }
    CPipesTableBaseDlg(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Таблица труб"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER);
    virtual ~CPipesTableBaseDlg();
};


class CAddSchemBaseDialog : public wxDialog
{
public:
    enum {
        wxID_CONNECT_TO_PIPE = 10001,
    };
protected:
    wxStaticText* m_staticTextConnectToPipe;
    wxChoice* m_choice;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk;
    wxButton* m_buttonCancel;

protected:

public:
    wxStaticText* GetStaticTextConnectToPipe() { return m_staticTextConnectToPipe; }
    wxChoice* GetChoice() { return m_choice; }
    CAddSchemBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Вставка схемы"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE);
    virtual ~CAddSchemBaseDialog();
};


class CDistBaseDialog : public wxDialog
{
protected:
    wxStaticText* m_staticTextStart;
    wxTextCtrl* m_textCtrlStart;
    wxStaticText* m_staticTextEnd;
    wxTextCtrl* m_textCtrlEnd;
    wxStaticText* m_staticTextAll;
    wxTextCtrl* m_textCtrlDistAll;
    wxStaticText* m_staticTextM;
    wxStaticText* m_staticTextX;
    wxTextCtrl* m_textCtrlDistX;
    wxStaticText* m_staticTextM1;
    wxStaticText* m_staticTextY;
    wxTextCtrl* m_textCtrlDistY;
    wxStaticText* m_staticTextM2;
    wxStaticText* m_staticTextZ;
    wxTextCtrl* m_textCtrlDistZ;
    wxStaticText* m_staticTextM3;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk;
    wxButton* m_buttonCancel;

protected:

public:
    wxStaticText* GetStaticTextStart() { return m_staticTextStart; }
    wxTextCtrl* GetTextCtrlStart() { return m_textCtrlStart; }
    wxStaticText* GetStaticTextEnd() { return m_staticTextEnd; }
    wxTextCtrl* GetTextCtrlEnd() { return m_textCtrlEnd; }
    wxStaticText* GetStaticTextAll() { return m_staticTextAll; }
    wxTextCtrl* GetTextCtrlDistAll() { return m_textCtrlDistAll; }
    wxStaticText* GetStaticTextM() { return m_staticTextM; }
    wxStaticText* GetStaticTextX() { return m_staticTextX; }
    wxTextCtrl* GetTextCtrlDistX() { return m_textCtrlDistX; }
    wxStaticText* GetStaticTextM1() { return m_staticTextM1; }
    wxStaticText* GetStaticTextY() { return m_staticTextY; }
    wxTextCtrl* GetTextCtrlDistY() { return m_textCtrlDistY; }
    wxStaticText* GetStaticTextM2() { return m_staticTextM2; }
    wxStaticText* GetStaticTextZ() { return m_staticTextZ; }
    wxTextCtrl* GetTextCtrlDistZ() { return m_textCtrlDistZ; }
    wxStaticText* GetStaticTextM3() { return m_staticTextM3; }
    CDistBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Расстояние между узлами"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE);
    virtual ~CDistBaseDialog();
};


class CPipeDescBaseDialog : public wxDialog
{
public:
    enum {
        wxID_COMBO_COMP = 10001,
        wxID_COMBO_ISP = 10002,
        wxID_COMBO_STRINGS = 10003,
    };
protected:
    wxStaticText* m_staticTextDate;
    wxDatePickerCtrl* m_ctlDate;
    wxStaticText* m_staticTextNumber;
    wxTextCtrl* m_textCtrlDesc;
    wxStaticText* m_staticTextNormaDoc;
    wxChoice* m_cbNormaDoc;
    wxStaticText* m_staticTextTSet;
    wxTextCtrl* m_textCtrlTSet;
    wxStaticText* m_staticTextSetGr;
    wxStaticText* m_staticTextTimeWork;
    wxTextCtrl* m_textCtrlTimeWork;
    wxStaticText* m_staticTextYr;
    wxStaticText* m_staticTextIsp;
    wxChoice* m_cbIsp;
    wxStaticText* m_staticTextTest;
    wxTextCtrl* m_textCtrlTtest;
    wxStaticText* m_staticTextTtestGr;
    wxStaticText* m_staticTextStrings;
    wxChoice* m_cbStrings;
    wxStaticText* m_staticTextStrNorm;
    wxChoice* m_cbStrings2;
    wxStaticText* m_staticTextStrCond;
    wxChoice* m_cbStrings3;
    wxStaticText* m_staticTextComp;
    wxChoice* m_cbComp;
    wxStaticText* m_staticTextTz;
    wxTextCtrl* m_textCtrlTz;
    wxStaticText* m_staticTextTzGr;
    wxStdDialogButtonSizer* m_stdBtnSizer;
    wxButton* m_buttonOk;
    wxButton* m_buttonCancel;

protected:

public:
    wxStaticText* GetStaticTextDate() { return m_staticTextDate; }
    wxDatePickerCtrl* GetCtlDate() { return m_ctlDate; }
    wxStaticText* GetStaticTextNumber() { return m_staticTextNumber; }
    wxTextCtrl* GetTextCtrlDesc() { return m_textCtrlDesc; }
    wxStaticText* GetStaticTextNormaDoc() { return m_staticTextNormaDoc; }
    wxChoice* GetCbNormaDoc() { return m_cbNormaDoc; }
    wxStaticText* GetStaticTextTSet() { return m_staticTextTSet; }
    wxTextCtrl* GetTextCtrlTSet() { return m_textCtrlTSet; }
    wxStaticText* GetStaticTextSetGr() { return m_staticTextSetGr; }
    wxStaticText* GetStaticTextTimeWork() { return m_staticTextTimeWork; }
    wxTextCtrl* GetTextCtrlTimeWork() { return m_textCtrlTimeWork; }
    wxStaticText* GetStaticTextYr() { return m_staticTextYr; }
    wxStaticText* GetStaticTextIsp() { return m_staticTextIsp; }
    wxChoice* GetCbIsp() { return m_cbIsp; }
    wxStaticText* GetStaticTextTest() { return m_staticTextTest; }
    wxTextCtrl* GetTextCtrlTtest() { return m_textCtrlTtest; }
    wxStaticText* GetStaticTextTtestGr() { return m_staticTextTtestGr; }
    wxStaticText* GetStaticTextStrings() { return m_staticTextStrings; }
    wxChoice* GetCbStrings() { return m_cbStrings; }
    wxStaticText* GetStaticTextStrNorm() { return m_staticTextStrNorm; }
    wxChoice* GetCbStrings2() { return m_cbStrings2; }
    wxStaticText* GetStaticTextStrCond() { return m_staticTextStrCond; }
    wxChoice* GetCbStrings3() { return m_cbStrings3; }
    wxStaticText* GetStaticTextComp() { return m_staticTextComp; }
    wxChoice* GetCbComp() { return m_cbComp; }
    wxStaticText* GetStaticTextTz() { return m_staticTextTz; }
    wxTextCtrl* GetTextCtrlTz() { return m_textCtrlTz; }
    wxStaticText* GetStaticTextTzGr() { return m_staticTextTzGr; }
    CPipeDescBaseDialog(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Параметры расчета"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER);
    virtual ~CPipeDescBaseDialog();
};

#endif
